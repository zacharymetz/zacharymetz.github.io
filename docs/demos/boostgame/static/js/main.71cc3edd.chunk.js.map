{"version":3,"sources":["components/boostGame/icons sync /^/.//.*$","components/parse/context.js","components/parse/parseapi.js","components/boostGame/baseGame.js","components/boostGame/betting.js","components/boostGame/bars.js","components/boostGame/index.js","App.js","serviceWorker.js","index.js","components/boostGame/icons/bank.svg","components/boostGame/icons/BAT.svg","components/boostGame/icons/Bitcoin.svg","components/boostGame/icons/XRP.svg","components/boostGame/icons/betacoin.png","components/boostGame/icons/betacoin1.svg","components/boostGame/icons/dogecoin.svg","components/boostGame/icons/eos.svg","components/boostGame/icons/ethereum.svg","components/boostGame/icons/isk.png","components/boostGame/icons/litecoin.svg","components/boostGame/icons/monero.svg","components/boostGame/information-dark.svg"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ParseContext","React","createContext","ParseAPI","BoostRocket","props","state","lastAngle","this","xMin","xMax","top","testPoints","length","yMax","right","P1","P2","hyp","Math","sqrt","pow","adj","angle","acos","PI","class","style","left","transform","transformOrigin","DefaultRocketSprite","Component","display","flexDirection","alignItems","className","BoostYaxis","height","offset","document","getElementById","clientHeight","setState","step","currentStep","numberedTicks","push","items","n","elements","totalItems","interval","floor","i","distributedCopy","tickElements","tickHeight","NumberedTick","value","majorTick","reverse","hight","bottom","round","BoostXaxis","width","clientWidth","tickWidth","XaxisTick","BoostPayoutNumber","myPayoutElemnt","crashed","color","wager","currentPayout","parseFloat","toFixed","payout","BoostLine","wagers","lines","x1","y1","x2","y2","stroke-linecap","stroke","strokeWidth","borderRadius","key","wagerElements","x","cashout","y","multiplyer","tick","RoundPreStart","textAlign","timeRemaining","LineWagerItem","elmID","replace","c","r","random","v","toString","hover","console","log","_this","onMouseEnter","onMouseOver","position","zIndex","src","require","currency","image","BettingPannel","betType","type","currentWager","cancelBet","nextRoundWager","waitingForNextRound","selectedCurrency","bettingInput","selectCurrency","placeManualBet","logMessage","Button","onClick","selectBetType","size","marginRight","paddingTop","flexGrow","overflow","ManualBet","onChange","event","target","name","betAmmount","autoCashout","betPlaced","title","betButton","block","submitBet","betOverlayStyles","backgroundColor","disabled","betWindow","padding","InputGroup","InputGroupAddon","addonType","Input","paddingBottom","PlacedBets","testPlayers","sorted_wagers","sort","a","b","bot","reduce","AutoBet","betChashout","totalBets","onWin","onWinIncrease","onLoss","onLossIncrease","stopAtProfit","stopAtLoss","outline","Footer","children","HistoryBar","historyElements","payoutHistory","PayoutHistoryElement","Header","MaxProfitIndicator","useState","tooltipOpen","setTooltipOpen","Tooltip","placement","isOpen","toggle","fontSize","coins","WalletDropDown","listOfCoins","dropdownToggle","dropdownOpen","dropDownItems","coin","DropdownItem","fontWeight","marginright","marginLeft","ammount","DropdownToggle","caret","flexWrap","Dropdown","DropdownMenu","header","divider","NotificationCenterMessage","dismissTimer","setTimeout","close","Alert","messageBody","BoostGameBase","currentTick","lastPayout","roundStart","Date","getTime","timeReaming","autoBetParameter","enabled","baseValue","cashoutValue","stopAtLost","autoBetCounters","wagerSum","notificationCenterMessage","inializeConnection","startGameLoop","wallet","subscribe","walletSubscription","on","object","messageObject","unshift","dissmissMessage","dismissed","message","getPayoutAtTick","pull_out","cashoutBot","endBoostRound","roundPreperationLoop","submitBotWager","submitWager","t","currenty","myWager","addNotificationCenterMessage","bot_wager","internet","userName","abs","boostGameWindow","cancelWager","maxHeight","overflowY","withParse","Consumer","parse","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71cc3edd.chunk.js","sourcesContent":["var map = {\n\t\"./BAT.svg\": 700,\n\t\"./Bitcoin.svg\": 701,\n\t\"./XRP.svg\": 702,\n\t\"./bank.svg\": 317,\n\t\"./betacoin.png\": 703,\n\t\"./betacoin1.svg\": 704,\n\t\"./dogecoin.svg\": 705,\n\t\"./eos.svg\": 706,\n\t\"./ethereum.svg\": 707,\n\t\"./isk.png\": 708,\n\t\"./litecoin.svg\": 709,\n\t\"./monero.svg\": 710\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 156;","import React from 'react';\n\nconst ParseContext = React.createContext(null);\n\n\nexport const withParse = Component => props => (\n  <ParseContext.Consumer>\n    {parse => <Component {...props} parse={parse} />}\n  </ParseContext.Consumer>\n);\n\nexport default ParseContext;\n","import { coinList } from '../../constants/coins';\n\n\n\nclass ParseAPI {\n  constructor() {\n    this.parse = require('parse');\n    //  this is the connected\n    this.parse.initialize(\"backend\");\n    this.parse.serverURL = 'https://api.logicx.ca'\n    //  this is where we can inisialize some of ther services \n\n    //  add the authchage function \n    this.parse.onAuthChangeListeners = [];\n    var _this =  this;\n    this.parse.onAuthChange = function(listener){\n      console.log(\"adding event listners\")\n      _this.parse.onAuthChangeListeners.push(listener);\n    }\n    this.parse.triggerOnAuthChange = function(){\n\n      var user = _this.parse.User.current()\n      _this.parse.onAuthChangeListeners.forEach((elm)=>{\n        elm(user);\n      })\n    }\n\n    \n\n  }\n  // down here is where we create function that will wrap around the parse api thing \n  async loginUser(email,password){\n    console.log(\"ASDASDASD\")\n    try{\n      \n      const user = await this.parse.User.logIn(email, password);\n      console.log(\"loggedinb\")\n      this.parse.triggerOnAuthChange(user);\n    }catch(error){\n      console.log(error)\n      throw error\n    }\n      \n  }\n\n  async createNewUser(username,email,password){\n    \n    //  make a new user \n    var user = new this.parse.User();\n    user.set(\"username\", email);\n    user.set(\"email\", email)\n    user.set(\"password\", password);\n    //  create a new public profile with the username\n    //  new account image \n    var PublicProfile = this.parse.Object.extend(\"publicProfile\");\n    var publicProfile = new PublicProfile();\n    publicProfile.set('username',username);\n    //  give them a random profile pic\n    publicProfile.set('profilePicture',\"https://i.pravatar.cc/150?img=\"+(Math.floor(Math.random() * 70) + 1).toString());\n    user.set(\"publicProfile\",publicProfile)\n    \n\n    //  create a private profile that only the user can see \n    //  for things relating to thier account \n    var PrivateProfile = this.parse.Object.extend(\"privateProfile\");\n    var privateProfile = new PrivateProfile();\n\n\n    //  set up all of the feilds for the user (TODO MOVE TO CLOUD CODE)\n    privateProfile.set(\"displayTotalWagers\", true);\n    privateProfile.set(\"displayAmmountWagered\", true);\n    privateProfile.set(\"maskSensitiveInformation\", false);\n    privateProfile.set(\"incognitoMode\", false);\n\n    privateProfile.set(\"name\", null);\n    privateProfile.set(\"dob\", new Date());  //  set dob to now\n    privateProfile.set(\"country\", \"\");\n\n    user.set(\"privateProfile\",privateProfile)\n    //  create the wallet for the user with all the currency from \n    //  coins / copnfig with a bunch of BAT for testing (MOVE TO COULD CODE)\n    var UserWallet = this.parse.Object.extend(\"userWallet\");\n    var userWallet = new UserWallet();\n    \n    //  sets all the coins in the app from the constants \n    for(let coin of coinList){\n      //  \n      userWallet.set(coin.name,0.0);\n    }\n\n    user.set(\"userWallet\",userWallet);\n    //  sign up the user \n    await user.signUp();\n    //  set public read access on the public profile and the user \n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(true);\n    publicProfile.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await publicProfile.save();\n    \n    //  set the private profile to not public access \n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(false);\n    privateProfile.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await privateProfile.save();\n\n    //  set the private profile to not public access \n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(false);\n    userWallet.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await userWallet.save();\n\n    //  done createing a new user trigger an auth change \n    this.parse.triggerOnAuthChange(user);\n    return \n    \n  }\n\n  \n\n  async createNewAnonUser(){\n    console.log(\"created anno user\");\n    //  so make a new new user name for this person \n    var username = \"anon_\" + makeid(7);\n    \n    //  generate a random passowrd \n    var password = makeid(64) + \"Q\";\n    //  sign them up \n    var user = new this.parse.User();\n    user.set(\"username\", username);\n    user.set(\"password\", password);\n    //user.set(\"profilePicture\", \"https://i.pravatar.cc/150?img=\"+(Math.floor(Math.random() * 70) + 1).toString())\n    //  make a public profile for the user so they can \n    //  have some data that is saved with all the chat stuff\n    var PublicProfile = this.parse.Object.extend(\"publicProfile\");\n    var publicProfile = new PublicProfile()\n    publicProfile.set('username',username);\n    publicProfile.set('profilePicture',\"https://i.pravatar.cc/150?img=\"+(Math.floor(Math.random() * 70) + 1).toString());\n    // other fields can be set just like with Parse.Object\n    user.set(\"publicProfile\",publicProfile)\n    \n    \n    await user.signUp();\n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(true);\n    publicProfile.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await publicProfile.save();\n\n    var user = this.parse.User.current();\n    var userAcl = new this.parse.ACL(user)\n    user.setACL(userAcl);\n\n\n    //  after we need to do the private data thing and \n    //  it will hold all of the virual \"items\" your \n    //  account holds (move this to the after user create trigger )\n    //  so that the user does not have access to this part \n    var Inventory = this.parse.Object.extend(\"Inventory\");\n    var inventory = new Inventory();\n    inventory.setACL(new this.parse.ACL(this.parse.User.current()));\n    \n    //  set the ammount of coins the account has \n    inventory.set(\"coins\", 0);\n\n    this.parse.User.current().set(\"inventory\", inventory);\n\n   \n    \n    \n    this.parse.triggerOnAuthChange();\n    \n  }\n\n  \n\n  //  this function will call its own parse thing \n  //  and say it wants to remove its session \n  async signOutCurrentUser(){\n    await this.parse.User.logOut();\n    this.parse.triggerOnAuthChange();\n  }\n    \n  \n  \n}\nfunction makeid(length) {\n  var result           = '';\n  var characters       = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n  for ( var i = 0; i < length; i++ ) {\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\nexport default ParseAPI;","import React, { Component } from 'react';\nimport { withParse } from '../parse';\nimport './index.css'\nimport './xaxis.css';\n\n\n\n\n\nexport class BoostRocket extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            lastAngle : 0\n        }\n    }\n    render(){\n        var { xMin, xMax } = this.props; \n        //  first we need to find out where to place the rocket \n        if(xMax < xMin){\n            xMax = xMin\n        }\n        \n        //  to get the top and angle we need the last line\n        let top = 0;\n        top = this.props.testPoints[this.props.testPoints.length-1][1];\n        top = ((1-(top / this.props.yMax))*100) + \"%\";\n        \n        //  lets calculate the right value \n        let right = 0 // = \"-32px\";\n        right = this.props.testPoints[this.props.testPoints.length-1][0] / 1000;\n        right =   \"calc( \"+  ((((right / xMax))*200)-100) + \"% - 32px )\";\n        //console.log(  right)\n\n\n        //  now we have to figure out the angle \n        //  we have the hyp and now need to \n        \n        //  so smooth out the animation \n        let offset = 0;\n        if(this.props.testPoints.length > 22){\n            offset = this.props.testPoints.length - 22 \n        }\n        let P1 = this.props.testPoints[this.props.testPoints.length - 2]\n        \n        let P2 = this.props.testPoints[this.props.testPoints.length-1]\n        let hyp =  (Math.sqrt(Math.pow((P1[0]/ 1000) - (P2[0]/1000),2) + Math.pow(P1[1] - P2[1],2))) ;\n        let adj =  (P2[1] - P1[1]);\n        let angle =  (Math.acos(adj/hyp) * (180/Math.PI))  ;\n        angle = ( angle) \n        //console.log(adj, hyp, angle, P1, P2)\n\n\n\n\n\n        return (\n        <div class=\"boost-rocket-wrapper\">\n            <div class=\"boost-rocket-sprite\" \n            style={{\n                left:right,\n                top:top,\n                transform: \"rotate(70deg)\",\n\n                transformOrigin: \"center top \"\n            }}>\n                \n                < DefaultRocketSprite />\n            </div>\n        </div>\n        )\n    }\n}\n\nexport function DefaultRocketSprite(props){\n    return (\n        <div style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n       }}>\n           <div className =\"rocket-sprite\" />\n           <div className = \"rocket-sprite-flames\" >\n               <div class='fire'>\n                   <div class='flame'></div>\n                   <div class='flame'></div>\n                   <div class='flame'></div>\n                   <div class='flame'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n               </div>\n           </div>\n       </div>\n    )\n}\n\n\nexport class BoostYaxis extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            height : 0,\n            offset : 15, //  the offset in px\n        };\n    }\n    componentDidMount() {\n        const height = document.getElementById('y-axis').clientHeight;\n        this.setState({ height });\n      }\n    render(){\n        const { height, offset } = this.state;\n\n        var  { yMax , step } = this.props;\n        //console.log(this.props)\n        yMax++\n        let currentStep = 1 + step;\n        let numberedTicks = [1];\n        while(currentStep <= ((yMax + step )*2)){\n            numberedTicks.push(currentStep);\n            currentStep = currentStep + step;\n        }\n        \n        numberedTicks = distributedCopy(numberedTicks,50);\n        //  now lets build all the delimiter steps \n        let tickElements = []//<NumberedTick value={1} majorTick={true} height={18}  />];\n        let majorTick = false; // flag that gets changed so we know if it should\n                                //  be a major more minor one \n        for(let i=0;i<numberedTicks.length;i++){\n            //  get the height percentage \n            let tickHeight = (((numberedTicks[i]-1)/(yMax-1)) * (height-offset)) + offset ;\n            \n            //  get an inrment constant \n            let incriment = ((1/(numberedTicks.length * 4)) * (height-offset)) ;\n\n            // each loop we need to add 3 ticks \n            // for(let j=0;j<3;j++){\n            //     let hight = tickHeight + (incriment * j) +12\n            //     tickElements.push(<RegularTick height={hight} />); \n            // }\n            \n            // then we can create the numbered tick \n            tickElements.push(<NumberedTick \n                                value={numberedTicks[i]}\n                                majorTick={majorTick}\n                                height={tickHeight}\n                              />);\n             //then we change the flag \n            //console.log(\"height for : \",numberedTicks[i], tickHeight)\n        }\n        tickElements = tickElements.reverse()\n        return (\n        <div  className=\"y-axis-element\" >\n            <div class=\"boost-yaxis-wrapper\">\n                {tickElements}\n            </div>\n        </div>\n        \n        )\n    }\n}\nfunction NumberedTick(props){\n    let hight = props.height +7\n    return (\n        <div class=\"yaxis-tick-wrapper\" style={{bottom:hight + \"px\"}}>\n            <div class=\"yaxis-tick-large\" >\n\n            </div>\n            {Math.round(props.value* 100)/100}\n        </div>\n    )\n}\nfunction RegularTick(props){\n    let hight = props.height //- 2\n    return (\n        <div  id=\"y-axis\" class=\"yaxis-tick-wrapper\" style={{bottom:hight + \"px\"}}>\n            <div class=\"yaxis-tick\">\n\n            </div>\n        </div>\n    )\n}\n\nexport class BoostXaxis extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            width : 0,\n            offset : 0, //  the offset in px\n        };\n    }\n    componentDidMount() {\n        const width = document.getElementById('x-axis').clientWidth;\n        this.setState({ width });\n    }\n    render(){\n        var  { xMax  } = this.props;\n        const { width, offset } = this.state;\n        let currentStep = 2;\n        let numberedTicks = [2];\n        while(currentStep <= ((xMax + 2 ))){\n            numberedTicks.push(currentStep);\n            currentStep = currentStep + 2;\n        }\n\n\n        let tickElements = []\n        for(let i=0;i<numberedTicks.length;i++){\n            let tickWidth = (((numberedTicks[i]-1)/(xMax-1)) * (width-offset)) + offset ;\n            tickElements.push(<XaxisTick \n                value={numberedTicks[i]}\n                left={tickWidth}\n              />);\n            \n        }\n        \n        return (\n        <div id=\"x-axis\" className=\"x-axis-element\">\n            <div className=\"boost-x-axis\" >\n                {tickElements}\n            </div>\n        </div>\n        )\n    }\n}\nfunction XaxisTick(props){\n    return (\n    <div  class=\"xaxis-tick-wrapper\" style={{left:props.left + \"px\"}}>\n        <div class=\"xaxis-tick\">\n\n        </div>\n        <div>\n        {props.value}s\n        </div>\n        \n    </div>\n    )\n}\n\nexport class BoostPayoutNumber extends Component{\n    \n    render(){\n        let style ={}\n        if(this.props.crashed){\n            style.color = \"red\";\n        }\n        let myPayoutElemnt;\n        if(this.props.wager.value){\n            myPayoutElemnt = (\n                <div class=\"boost-payout-currency-value\">\n                    + ${(this.props.currentPayout * parseFloat(this.props.wager.value)).toFixed(2)}\n                    </div>\n            )\n        } \n        if(this.props.wager.payout){\n            myPayoutElemnt = (\n                <div class=\"boost-payout-currency-value\">\n                    + ${(parseFloat(this.props.wager.payout) * parseFloat(this.props.wager.value)).toFixed(2)}\n                </div>\n            );\n        }else{\n            if(this.props.crashed && this.props.wager.value){\n                myPayoutElemnt = (\n                    <div class=\"boost-payout-currency-value\" style={style}>\n                        - ${(parseFloat(this.props.wager.value)).toFixed(2)}\n                        </div>\n                )\n            }\n        }\n        return (\n            <div className=\"boost-payout-number-wrapper\">\n                <div className=\"boots-payout-display\" style={style}>\n                    <div className=\"boost-payout-number\">\n                        {this.props.currentPayout.toFixed(2)}x\n                    </div>\n                    <div className=\"boost-payout-subtitle\">\n                        Current Payout\n                    </div >\n                    {myPayoutElemnt}\n                </div>\n\n                \n            </div>\n        )\n    }\n}\n\n//  creates the svg line \nexport class BoostLine extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            \n        }\n    }\n    render(){\n        var { testPoints, xMax, xMin, wagers } = this.props;\n        if(xMax < xMin){\n            xMax = xMin\n        }\n        //  create all the lines based on where they should be \n        let lines = [];\n        for(let i =1;i<testPoints.length;i++){\n            //  starting point \n            let x1 =( (((testPoints[i-1][0]/ 1000) /xMax) *100) - 0.02  )+ \"%\";\n            let y1 =( ((1-(testPoints[i-1][1] /this.props.yMax)) *100)  - 0.02  )+ \"%\";\n            \n            //  ending point \n            let x2 =( (((testPoints[i][0]/1000) /xMax) *100) + 0.02  ) + \"%\";\n            let y2 =( ((1-(testPoints[i][1] /this.props.yMax)) *100) + 0.02  ) + \"%\";\n            //console.log(x2,y2)\n            lines.push(\n                <line \n                stroke-linecap=\"round\"\n                    x1={x1 } \n                    y1={y1}\n                    x2={x2} \n                    y2={y2} \n                    style={{stroke:\"rgb(255,255,255,0.3)\",strokeWidth:\"5\", borderRadius: \"3px\"}} \n                    key={\"line-segment-\"+i}\n                />\n            )\n        }\n\n        //  now lets make the elements for all the wagers \n        let wagerElements = [];\n        for( let wager of wagers){\n            if(wager.payout){\n\n                //  caculate the middle point for the \n                //  placement of the wager element \n\n                let x =( (((wager.cashout/ 1000) /xMax) *100) - 0.02  )+ \"%\";\n                let y =( ((((wager.payout-1) /(this.props.yMax))) *100)  )+ \"%\";\n                 \n                wagerElements.push(\n                    <LineWagerItem \n                        bottom={y}\n                        left={x}\n\n                        multiplyer={wager.payout}\n                        tick={wager.cashout}\n                        value={wager.value}\n                        wager={wager}\n                    />\n                ) \n            }\n            \n        }\n\n        return (\n            <div class=\"boost-line-wrapper\">\n                <div class=\"boost-line-inner-wrapper\">\n                    <div className=\"boost-line-svg-wrapper\">\n                        <svg class=\"boost-line-svg\">\n                            {lines}\n                            \n                        </svg>\n                    </div>\n                    <div className=\"boost-line-wager-wrapper\">\n                        <div className=\"boost-line-wager\">\n                            {wagerElements}\n                        </div>\n                    </div>\n                \n                </div>\n                \n                \n            </div>\n        )\n    }\n}\n\n\n\n\nexport function RoundPreStart(props){\n    return (\n    <div className=\"pre-round-wrapper\">\n    <div style={{\n        display : \"flex\",\n\n    }}>\n        < DefaultRocketSprite />\n        <div style={{ textAlign : \"center\" }}>\n            <div className=\"pre-round-title\">\n                Perparing Round\n            </div>\n            <div className=\"pre-round-round-down\">\n                Starting In <span >{props.timeRemaining}s</span>\n            </div>\n        </div>\n        \n    </div>\n\n        \n    </div>\n    )\n}\n\n\nclass LineWagerItem extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            height : 0,\n            width : 0,\n            elmID : uuidv4() + \"-wager-placement\",\n            hover:false\n        };\n    }\n    componentDidMount() {\n        const height = document.getElementById(this.state.elmID).clientHeight;\n\n        const width = document.getElementById(this.state.elmID).clientWidth;\n        this.setState({ height, width });\n    }\n    onMouseOver(){\n        console.log(\"mouse over\")\n        this.setState({\n            hover:true\n        })\n    }\n    onMouseOut(){\n        console.log(\"mouse out\")\n        this.setState({\n            hover:false\n        })\n    }\n    render(){\n        var _this = this;\n        const { elmID,height,width } = this.state; \n        const { bottom, left, wager  } = this.props;\n        \n        return (\n            <div \n                onMouseEnter={()=>{\n                    _this.onMouseOver();\n                }}\n                id={elmID}\n                style={{\n                    position : \"absolute\",\n                    bottom: \"calc( \"+ bottom + \" - \" + (height/2) + \"px )\",\n                    left: \"calc( \"+ left + \" - \" + (width/2) + \"px )\",\n                    zIndex : 10000\n                }}\n            >\n                < img  src={require(\"./icons/\"+wager.currency.image)} style={{height : \"1.5rem\", width : \"1.5rem\"}}  />\n                \n            </div>\n            )\n    }\n    \n}\nfunction uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n  \n\nfunction distributedCopy(items, n) {\n    \n    var elements = [items[0]];\n    var totalItems = items.length - 2;\n    var interval = Math.floor(totalItems/(n - 2));\n    for (var i = 1; i < n - 1; i++) {\n        elements.push(items[i * interval]);\n    }\n    elements.push(items[items.length - 1]);\n    return elements;\n}","import React, { Component } from 'react';\nimport { withParse } from '../parse';\nimport './betting.css'\nimport { Button , InputGroup,\n    InputGroupAddon,\n    InputGroupButtonDropdown,\n    Input,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem} from 'reactstrap';\n\nexport  class BettingPannel extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            betType : \"manual\",\n        }\n    }\n    selectBetType(type){\n        this.setState({\n            betType : type\n        })\n    }\n    render(){\n        var _this = this;\n        const { betType } = this.state;\n        const {currentWager,cancelBet, nextRoundWager,waitingForNextRound,crashed, selectedCurrency, selectCurrency } = this.props;\n\n        let bettingInput = <ManualBet \n                placeManualBet={this.props.placeManualBet}\n                cashout={this.props.cashout} \n                wagers={this.props.wagers}\n                currentPayout={this.props.currentPayout}\n                currentWager={currentWager}\n                nextRoundWager={nextRoundWager}\n                waitingForNextRound={waitingForNextRound}\n                crashed={crashed}\n                cancelBet={cancelBet}\n                selectedCurrency={selectedCurrency}\n                logMessage={this.props.logMessage}\n        />\n        if(betType == \"auto\"){\n            bettingInput = < AutoBet />\n        }\n\n\n        return (\n            <div className=\"betting-pannel-wrapper\">\n                <div className=\"bet-type-selector\">\n                    <Button \n                    onClick={()=>{\n                        _this.selectBetType(\"manual\")\n                    }}\n                    color=\"primary\"  size=\"sm\" style={{marginRight:\"0.25rem\"}}>Manuel</Button>{' '}\n                    <Button \n                     onClick={()=>{\n                        _this.selectBetType(\"auto\")\n                    }}\n                    color=\"primary\" size=\"sm\">Auto-bet</Button>{' '}\n                </div>\n                <div style={{paddingTop:\"0rem\", flexGrow : \"1\", height:\"100%\", overflow:\"hidden\"}}>\n                    {bettingInput}\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\nclass ManualBet extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            betAmmount : 0 ,\n            autoCashout : 0,\n            betPlaced : false\n        }\n    }\n    onChange = event => {\n        \n        this.setState({ [event.target.name]: event.target.value });\n    }\n    submitBet(){\n        this.props.logMessage(\n             { title : \"Wager Submitted\" }\n        )\n        const { betAmmount, autoCashout } = this.state;\n        console.log(this.state)\n        console.log(\"submitting wager\")\n        this.props.placeManualBet(betAmmount,autoCashout);\n\n        this.setState( {\n            betPlaced : true\n        });\n    }   \n    cashout(){\n        this.props.logMessage(\n            { title : \"Wager Cashed Out\" }\n       )\n        this.props.cashout();\n    }\n    cancelBet(){\n        this.props.logMessage(\n            { title : \"Bet Canceled\" }\n       )\n        this.props.cancelBet();\n    }\n    render(){\n        //console.log(this.state)\n        const { betAmmount , autoCashout, betPlaced,  } = this.state;\n        const { currentPayout,currentWager, nextRoundWager,waitingForNextRound,crashed, selectCurrency, selectedCurrency } = this.props\n        //console.log(\"wager states :\",currentWager, nextRoundWager)\n        var _this = this;\n        //  if we have cashouted then we just clear us \n        \n        //  make the button here \n        let betButton = (<Button color=\"primary\" size=\"sm\" block\n                            onClick={()=>{\n                                _this.submitBet()\n                            }}\n                        >Place Bet</Button>)\n        \n\n        //  we also need to make a few style things here \n        let betOverlayStyles = {\n            position : \" absolute\",\n            backgroundColor : \"rgb(0,0,0,0.5)\",\n            top :0,\n            zIndex : 95\n        }\n        \n        //  if we are before the intersage and you \n        //  have no but then you can cancel it \n        if(nextRoundWager.value && (!currentWager.value || (currentWager.payout && currentWager.value))){\n            betButton = (<Button color=\"primary\" size=\"sm\" block\n                            onClick={()=>{\n                                _this.cancelBet()\n                            }}\n                        >Cancel Bet</Button>);\n             betOverlayStyles.height = \"100%\";\n            betOverlayStyles.width = \"100%\";\n        }\n\n        if(currentWager.value && !currentWager.payout){\n            betButton = ( <Button color=\"primary\" size=\"sm\" block\n                            onClick={()=>{\n                                _this.cashout()\n                            }}\n                        >Cashout</Button>);\n            betOverlayStyles.height = \"100%\";\n            betOverlayStyles.width = \"100%\";\n        }\n        if(currentWager.value && waitingForNextRound ){\n            betButton = ( <Button color=\"primary\" size=\"sm\" block disabled\n                            \n                        >Waiting For Round...</Button>);\n            betOverlayStyles.height = \"100%\";\n            betOverlayStyles.width = \"100%\";\n        }\n        \n        //  the place bet window \n        let betWindow = (\n            <div style={{padding:\"0.5rem\"}}>\n                <div  style={{position:\"relative\"}}>\n                    <div>Bet Ammount</div>\n                    <InputGroup size=\"sm\" >\n                        \n                    <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input\n                        name=\"betAmmount\"\n                        value={betAmmount}\n                        onChange={this.onChange}\n                        />\n                        \n                        <InputGroupAddon addonType=\"append\"><Button>1/2</Button></InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\"><Button>x2</Button></InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\"><Button>Max</Button></InputGroupAddon>\n                    </InputGroup>\n                    <div>Auto Cashout</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"1rem\"}}>\n                        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input\n                        name=\"autoCashout\"\n                        value={autoCashout}\n                        onChange={this.onChange}\n                        />\n                        \n                        \n                        <InputGroupAddon addonType=\"append\"><Button>X</Button></InputGroupAddon>\n                    </InputGroup>\n\n\n                    <div style={betOverlayStyles}>\n\n                    </div>\n                </div>\n                <div>\n                    {betButton}\n                </div>\n                \n            </div>\n        )\n\n       \n\n        //  here the round is going and we can cashout our bet             \n        //  if the the player has placed a bet give them a button to pull out \n        //  with \n        // if(betPlaced){\n        //     betWindow = (\n        //         <div style={{padding:\"0.5rem\"}}>\n        //             <div>CashOut Ammount</div>\n        //             <div>\n        //                 $ {currentPayout * betAmmount }\n        //             </div>\n        //             <Button color=\"primary\" size=\"sm\" block\n        //                 onClick={()=>{\n        //                     _this.cashout()\n        //                 }}\n        //             >Cashout</Button>\n        //         </div>\n        //     )\n        // }\n\n\n        return (\n            <div class=\"manual-bet-pannel\">\n                {betWindow}\n                <div style={{flexGrow:1,height:\"100%\", overflow: \"hidden\"}}>\n                    < PlacedBets  wagers={this.props.wagers} />\n                </div>\n\n                \n            </div>\n        )\n    }\n}\n\nclass PlacedBets extends Component{\n    render(){\n        const { wagers } = this.props;\n\n        let testPlayers = [];\n        const sorted_wagers = wagers.sort((a,b) => a.bot - b.bot)\n        for(let wager of sorted_wagers){\n            \n            //  lets do some calulations for each item \n            let value = wager.value;\n            let payout = \"\";\n            \n            if(wager.payout){\n                value = (parseFloat(wager.payout) * parseFloat(wager.value)).toFixed(2)\n                payout = \"x\" + wager.payout \n            };\n\n            testPlayers.push(\n                <div className=\"session-wager-list-item\">\n                        <div className=\"session-wager-player-status\">\n                            \n                        </div>\n                        <div className=\"session-wager-player-name\">\n                        {wager.name} \n                        </div>\n                        <div className=\"session-wager-player-delta\">\n                            {payout}\n                        </div>\n                        <div className=\"session-wager-player-ammount\">\n                            ${value} \n                        </div>\n                        <div className=\"session-wager-player-currency\">\n                            \n                        </div>\n                    </div>\n            )\n        }\n\n\n        return (\n            <div className=\"betting-session-wagers\" >\n                <div className=\"session-wagers-header\" >\n                    <div className=\"session-wagers-players\" >\n                        {sorted_wagers.length} players\n                    </div>\n                    <div className=\"session-wagers-total\">\n                        ${sorted_wagers.length > 0 ? sorted_wagers.map(a=>parseFloat(a.value)).reduce((a,b)=>a + b) : 0}\n                    </div>\n                </div>\n                \n                <div className=\"session-wager-list\">\n                {testPlayers}\n                    </div>\n                \n                \n            </div>\n        )\n    }\n}\n\n\n\nclass AutoBet extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            betAmmount : 0 ,\n            betChashout : 0,\n            totalBets : 0,\n            onWin : 0,\n            onWinIncrease : true,\n            onLoss : 0,\n            onLossIncrease : true,\n            stopAtProfit : 0,\n            stopAtLoss : 0\n        }\n    }\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n    placeBet(){\n\n    }\n    cancelBet(){\n\n    }\n    render(){\n        const { betAmmount,betChashout,totalBets,onWin,onWinIncrease,onLoss,onLossIncrease,stopAtProfit,stopAtLoss } = this.state;\n        var _this = this;\n        return (\n            <div className=\"auto-bet-pannel\">\n                <div style={{padding:\"0.5rem\"}}>\n                    <div>Bet Ammount</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input\n                        name=\"betAmmount\"\n                        value={betAmmount}\n                        onChange={this.onChange}\n                        />\n                        \n                        <InputGroupAddon addonType=\"append\"><Button>1/2</Button></InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\"><Button>x2</Button></InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\"><Button>Max</Button></InputGroupAddon>\n                    </InputGroup>\n                </div>\n                <div className=\"bet-row\">\n                    <div className=\"bet-col\" style={{marginRight:\"0.5rem\"}}>\n                    <div>Bet Cashout</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input\n                        name=\"betChashout\"\n                        value={betChashout}\n                        onChange={this.onChange}\n                        />\n                        \n                        \n                    </InputGroup>\n                    </div>\n                    <div className=\"bet-col\" >\n                    <div>Total Bets</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">#</InputGroupAddon>\n                        <Input \n                        name=\"totalBets\"\n                        value={totalBets}\n                        onChange={this.onChange}\n                        />\n                        \n                        \n                    </InputGroup>\n                    </div>\n                </div>\n\n                <div style={{padding:\"0.5rem\"}}>\n                    <div>On Win</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">%</InputGroupAddon>\n                        <Input\n                        name=\"onWin\"\n                        value={onWin}\n                        onChange={this.onChange}\n                        />\n                        \n                       \n                        <InputGroupAddon addonType=\"append\" \n                        onClick={()=>{\n                            _this.setState({\n                                onWinIncrease : true\n                            })\n                        }}\n                        \n                        ><Button\n                        outline={!onWinIncrease}\n                        >Increase</Button></InputGroupAddon>\n                        <InputGroupAddon\n                        onClick={()=>{\n                            _this.setState({\n                                onWinIncrease : false\n                            })\n                        }}\n                        addonType=\"append\">\n                        <Button \n                        outline={onWinIncrease}>Reset</Button></InputGroupAddon>\n                    </InputGroup>\n                </div>\n\n                <div style={{padding:\"0.5rem\"}}>\n                    <div>On Loss</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">%</InputGroupAddon>\n                        <Input \n                        \n                        name=\"onLoss\"\n                        value={onLoss}\n                        onChange={this.onChange}/>\n                        \n                        \n                        <InputGroupAddon \n                        onClick={()=>{\n                            _this.setState({\n                                onLossIncrease : true\n                            })\n                        }}\n                        addonType=\"append\" ><Button outline={!onLossIncrease}>Increase </Button></InputGroupAddon>\n                        <InputGroupAddon \n                        onClick={()=>{\n                            _this.setState({\n                                onLossIncrease : false\n                            })\n                        }}\n                        addonType=\"append\"><Button outline={onLossIncrease}>Reset</Button></InputGroupAddon>\n                    </InputGroup>\n                </div>\n\n                <div className=\"bet-row\">\n                    <div className=\"bet-col\" style={{marginRight:\"0.5rem\"}}>\n                    <div>Stop At Profit</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input \n                         name=\"stopAtProfit\"\n                         value={stopAtProfit}\n                         onChange={this.onChange}\n                        />\n                        \n                        \n                    </InputGroup>\n                    </div>\n                    <div className=\"bet-col\" >\n                    <div>Stop At Loss</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">#</InputGroupAddon>\n                        <Input \n                         name=\"stopAtLoss\"\n                         value={stopAtLoss}\n                         onChange={this.onChange}\n                        />\n                        \n                        \n                    </InputGroup>\n                    </div>\n                </div>\n                <div style={{padding:\"0.5rem\"}}>\n                <Button color=\"primary\" size=\"sm\" block>Place Bet</Button>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component,useState } from 'react';\nimport { withParse } from '../parse';\nimport { Dropdown,Tooltip, DropdownToggle, DropdownMenu, DropdownItem, Alert } from 'reactstrap';\nimport './sessionHistory.css';\nimport './header.css';\nimport './notificationcenter.css'\nimport { coinList } from '../../constants/coins';\n\n\n\nexport function Footer(props){\n    return (\n    <div className=\"boost-footer\" >\n        <div className=\"footer-icon-wrapper\" >\n            <div  className=\"game-fullscreen-button\" />\n        </div>\n        <div className=\"footer-icon-wrapper\" >\n            <div className=\"game-expand-button\" />\n        </div>\n        {props.children}\n        <div className=\"footer-disapear\" />\n            \n    </div>\n    )\n}\n\n\n\n\n\n\n\n\n\n\nexport function HistoryBar(props){\n    let historyElements = [];\n    for(let payout of props.payoutHistory){\n        historyElements.push(\n            <PayoutHistoryElement\n                value={payout}\n            />\n        )\n    }\n    return (\n    <div  className=\"session-history-wrapper\">\n        {historyElements}\n    </div>\n    )\n}\n\n\nfunction PayoutHistoryElement(props){\n    return(<div className=\"payout-history-element\" >{props.value}x</div>)\n} \n\n\n\n\nexport function Header(props){\n    //console.log(props)\n    return (\n    <div className=\"boost-header\">\n        <div className=\"header-icon\" >\n\n        </div>\n        <div className=\"boost-header-title\" >\n            Boost\n        </div>\n        <div className=\"boost-header-maxpayout\" >\n            < MaxProfitIndicator />\n            {props.children}\n        </div>\n    </div>\n    )\n\n}\n\nconst MaxProfitIndicator = (props) => {\n    const [tooltipOpen, setTooltipOpen] = useState(false);\n  \n    const toggle = () => setTooltipOpen(!tooltipOpen);\n  \n    return (\n      <div >\n        <div id=\"TooltipExample\" className=\"boost-header-maxpayout\">Max Profit < div className=\"boost-header-maxpayout-icon\" /></div>\n        <Tooltip placement=\"left\" isOpen={tooltipOpen} target=\"TooltipExample\" toggle={toggle}>\n            <div style={{\n                fontSize : \"0.75rem\",\n                color : \"rgb(255,255,255,0.5)\"\n            }}>\n                $7000 max Profit\n            </div>\n        </Tooltip>\n      </div>\n    );\n  }\n\n  export const coins = [\n    {\n        \"name\" : \"BTC\",\n        \"image\" : \"Bitcoin.svg\",\n        \"ammount\" : 3245.32\n    },\n    {\n        \"name\" : \"BAT\",\n        \"image\" : \"BAT.svg\",\n        \"ammount\" : 3245.32\n    },\n    {\n        \"name\" : \"DOGE\",\n        \"image\" : \"dogecoin.svg\",\n        \"ammount\" : 22.32\n    },\n    {\n        \"name\" : \"EOS\",\n        \"image\" : \"eos.svg\",\n        \"ammount\" : 45.32\n    },\n    {\n        \"name\" : \"ETH\",\n        \"image\" : \"ethereum.svg\",\n        \"ammount\" : 45.32\n    },\n    {\n        \"name\" : \"LTC\",\n        \"image\" : \"litecoin.svg\",\n        \"ammount\" : 3245.32\n    },\n    {\n        \"name\" : \"XMR\",\n        \"image\" : \"monero.svg\",\n        \"ammount\" : 3.32\n    },\n    {\n        \"name\" : \"XRP\",\n        \"image\" : \"XRP.svg\",\n        \"ammount\" : 1.32\n    },{\n        \"name\" : \"BETA\",\n        \"image\" : \"betacoin.png\",\n        \"ammount\" : 432.34\n    }]\nexport class WalletDropDown extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            listOfCoins : props.coins\n\n            \n        }\n    }\n    \n    render(){\n        const {selectedCurrency, selectCurrency} = this.props;\n        var _this = this;\n        const { listOfCoins, dropdownOpen, } = this.state;\n        let dropDownItems = []\n        let dropdownToggle;\n        for(let coin of listOfCoins){\n            dropDownItems.push(\n                <DropdownItem  color=\"primary\" size=\"sm\"\n                    style={{display:\"flex\", width : \"100%\",fontWeight:500,alignItems: \"center\", fontSize : \"0.9rem\"}}\n                    onClick={()=>{\n                        selectCurrency( coin)\n                    }}\n                >\n                    <img \n                        src={require(\"./icons/\"+coin.image)}\n                        style={{\n                            height : \"1.5rem\",\n                            width : \"1.5rem\",\n                            marginRight: \"0.5rem\"\n                        }} \n                    /> \n                    {coin.name} \n                \n                    <div \n                    style={{\n                        marginright:\"0.5rem\",\n                        fontSize : \"0.8rem\",\n                        flexGrow : 1,\n                        marginLeft: \"1rem\",\n                    textAlign : \"right\",\n                    fontWeight : 400\n                    }}\n                    >\n                        ${coin.ammount}\n                    </div>\n                </DropdownItem>\n            )\n            if(coin.name == selectedCurrency.name){\n                dropdownToggle = (\n                    <DropdownToggle caret style={{display:\"flex\", width : \"100%\",alignItems: \"center\", fontSize : \"0.9rem\", flexWrap : \"no-wrap\", fontWeight: 600}}\n                    \n                >\n                    <img \n                        src={require(\"./icons/\"+coin.image)}\n                        style={{\n                            height : \"1.5rem\",\n                            width : \"1.5rem\",\n                            marginRight: \"0.5rem\"\n                        }} \n                    /> \n                    {coin.name} \n                \n                    <div \n                    style={{\n                        marginright:\"0.5rem\",\n                        fontSize : \"0.9rem\",\n                        flexGrow : 1,\n                        marginLeft: \"1rem\",\n                    textAlign : \"right\",\n                    fontWeight : 400\n                    }}\n                    >\n                        ${coin.ammount}\n                    </div>\n                    </DropdownToggle>\n                )\n            }\n        }\n\n        return (\n        \n            <Dropdown isOpen={dropdownOpen} size=\"sm\" toggle={()=>{\n                _this.setState({\n                    dropdownOpen : !dropdownOpen\n                })\n            }}>\n                {dropdownToggle}\n                <DropdownMenu right>\n                <DropdownItem header>Wallet</DropdownItem>\n                    {dropDownItems}\n                    <DropdownItem divider />\n                    <DropdownItem\n                    style={{display:\"flex\", width : \"100%\",alignItems: \"center\", fontSize : \"0.9rem\", flexWrap : \"no-wrap\"}}\n                    >\n                    <img \n                        src={require(\"./icons/bank.svg\")}\n                        style={{\n                            height : \"1.5rem\",\n                            width : \"1.5rem\",\n                            marginRight: \"0.5rem\"\n                        }} \n                    /> \n                        My Account    \n                    </DropdownItem>\n                </DropdownMenu>\n            </Dropdown>\n        \n        )\n    }\n}\n\nexport class NotificationCenter extends Component {\n    constructor(props){\n        super(props);\n         //console.log(props)\n\n    }\n     \n    \n    \n    render(){\n        //  we can loop throug the props \n\n        const {messages} = this.props;\n        var messageList = [];\n       \n        for(let message of this.props.messages){\n            //  \n            \n            if(!message.message.dismissed){\n                messageList.push(<NotificationCenterMessage\n                //key={}\n                    messageBody={message.message.title}\n                    dismissTimer={3000}\n                    close={()=>{\n                        //  so the message can close it self\n                        //  and have a clise button that will \n                        //  dismiss it \n                        message.dissmissMessage()\n                    }}  \n                    //  the childern ar the calls to actions\n    \n                >\n    \n    \n                </NotificationCenterMessage>)\n            }\n            \n        }\n        return (\n            <div className=\"notification-center-wrapper\">\n               <div className=\"notification-center-message-list\">\n                    {messageList}\n                </div> \n            </div>\n        )\n    }\n}\n\nconst NotificationCenterMessage = (props)=>{\n\n    //  with all the props we can do some cool ass things \n    if(props.dismissTimer){\n        setTimeout(()=>{\n            //  close the message\n            props.close();\n        },props.dismissTimer);\n    }\n   \n    \n    \n    return (<Alert \n        size=\"sm\"\n                color=\"secondary\" \n                isOpen={true}>\n                <img \n                    src = {require(\"./information-dark.svg\")}\n                    style={{\n                        height: \"0.75rem\",\n                        width : \"0.75rem\",\n                        marginRight : \"0.5rem\"\n                    }}\n                />{props.messageBody}\n            </Alert>)\n}","import React, { Component } from 'react';\nimport { withParse } from '../parse';\nimport './index.css'\nimport { BoostLine , BoostRocket , BoostPayoutNumber,DefaultRocketSprite, BoostXaxis , BoostYaxis, RoundPreStart } from './baseGame';\nimport { BettingPannel } from './betting'\nimport { Header, HistoryBar, Footer, WalletDropDown, NotificationCenter, coins} from './bars'\nimport {internet} from 'faker'\n\n\nclass BoostGameBase extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            xMax : 6, // time in seconds of the x axies\n            xMin : 2,\n            yMax :2.5 , //    the percentage of the y axis in integer precentage \n            currentPayout : 1,   //  current position \n            currentTick : 0,\n            testPoints  : [\n                [0,0],  //  at zero seconds the payout is 1\n                [0.1,0.01]\n            ],\n            wagers : [], // a list of wagers for the current session \n            lastPayout : 1.43,\n            coins : coins,\n            payoutHistory : [],\n            roundStart : (new Date()).getTime(),\n            timeReaming : 0,\n            crashed : false,\n            nextRoundWager : {},\n            currentWager : {},\n            autoBetParameter : {    //  for setting up the auto betting\n                enabled : false,    //  an in bot browser \n                baseValue : 0,\n                cashoutValue : 0,\n                totalBets : 0,\n                onWin : 0,\n                onWinIncrease : true,\n                onLoss : 0,\n                onLossIncrease : true,\n                stopAtProfit : 0,\n                stopAtLost : 0\n            },\n            autoBetCounters : {\n                totalBets : 0,  //  how many auto bets \n                wagerSum : 0,   //  total auto bet win sum \n            },\n            waitingForNextRound : false,\n            selectedCurrency : {\n                \"name\" : \"BETA\",\n                \"image\" : \"betacoin.png\",\n                \"ammount\" : 3245.32\n            },\n            notificationCenterMessage : [],\n        };\n        this.inializeConnection();\n        \n    }\n\n    async inializeConnection(){\n        //  connect socket to the server \n        var _this = this;\n        _this.startGameLoop();\n        return\n        //  connect to the wallet table and wait for \n        //  updates on our table \n        let user = this.props.parse.parse.User.current();\n        console.log(\"thing started\")\n        //  do a live query for their wallet object \n        const UserWallet = this.props.parse.parse.Object.extend(\"UserWallet\");\n        const walletQuery = new this.props.parse.parse.Query(UserWallet);\n        //walletQuery.equalTo(\"id\", user.attributes.userWallet.id);\n        let wallet = await walletQuery.first()\n        console.log(wallet)\n        let walletSubscription = await walletQuery.subscribe();\n        walletSubscription.on('open', () => {\n            console.log('subscription opened');\n            _this.startGameLoop();\n        });\n        walletSubscription.on('update', (object) => {\n            console.log('object updated');\n        });\n        walletSubscription.on('close', () => {\n            console.log('subscription closed');\n        });\n    }\n\n    // this will add a notification center message  \n    addNotificationCenterMessage(messageObject){\n        //  add it to the list \n        var { notificationCenterMessage } = this.state;\n        notificationCenterMessage.unshift({\n            dissmissMessage : ()=>{\n                //  when this function is called \n                //  the message will be removed from the\n                //  notification center\n                console.log(messageObject)\n                messageObject.dismissed = true;\n\n                this.setState({})\n            },\n            message : messageObject\n        })\n\n        this.setState({\n            notificationCenterMessage : notificationCenterMessage\n        })\n\n    }\n\n\n\n    //  master loop for boost game\n    startGameLoop(){\n        var currentTick = this.state.currentTick + 16;\n        var _this = this;\n        var currentPayout =  (Math.round((this.getPayoutAtTick(currentTick) + 1)*100) / 100);\n        //console.log(currentTick)\n        //  if we hit this we restart just for testing \n        if(this.state.testPoints[this.state.testPoints.length-1][1] < this.state.lastPayout){\n            var testPoints = this.state.testPoints;\n            let lastTestPoint = this.state.testPoints[this.state.testPoints.length-1];\n            //console.log(this.getPayoutAtTick(currentTick),lastTestPoint[1] )\n            //  if there is a % change from last time so we dont do alot of updates \n            // if(this.getPayoutAtTick(currentTick) > lastTestPoint[1]){\n            //     testPoints.push(\n            //         [\n            //             currentTick ,\n            //             this.getPayoutAtTick(currentTick) \n            //         ]\n            //     );\n            // }else{\n            //     this.state.testPoints[this.state.testPoints.length-1][0] = currentTick\n            // }\n            testPoints.push(\n                [\n                    currentTick ,\n                    this.getPayoutAtTick(currentTick) \n                ]);\n\n            \n            \n            \n\n            //  do a max y calculation\n            var yMax = this.state.yMax;\n            if(currentPayout > 2.2){\n                yMax = currentPayout + 0.3\n            }\n\n            // so some checks to see if some bots need to pull out \n            const wagers = [...this.state.wagers]\n            for(const wager of wagers){\n                if(wager.bot && wager.pull_out < currentPayout * 100 && !wager.cashout){\n                    // get the bot out of there lol \n                    this.cashoutBot(wager);\n                     \n                }\n\n            }\n\n            // check my wager for auto cashout and cash it out \n            \n\n\n            this.setState({\n                testPoints : testPoints,\n                xMax : this.state.testPoints[this.state.testPoints.length-1][0] / 1000,\n                currentTick : currentTick,\n                currentPayout : currentPayout,\n                yMax : yMax,\n                wagers\n                \n            })\n            setTimeout(()=>{\n                \n                _this.startGameLoop()\n            },16)\n        }else{\n            console.log(\"done\")\n            //  we reset and then start the loop \n            let payoutHistory = this.state.payoutHistory;\n            payoutHistory.unshift(this.state.currentPayout);\n            _this.setState({\n                crashed : true,\n                payoutHistory:payoutHistory,\n                \n            })\n            \n            this.endBoostRound()\n        }\n    }\n    endBoostRound(){\n        \n        var _this = this;\n        setTimeout(()=>{\n            this.setState({\n                roundStart : (new Date()).getTime() + 7500, //  to seconds from now\n                wagers : [] ,\n                currentWager : {},\n                waitingForNextRound : true,\n            })\n            _this.roundPreperationLoop();\n        },3000)\n        \n    }\n\n    roundPreperationLoop(){\n        var _this = this;\n        //  should run until the next round start then \n        //  hand it over to the game loop \n        if(this.state.roundStart < (new Date()).getTime()){\n           //   the round starts  \n            this.setState({\n                xMax : 6, // time in seconds of the x axies\n                yMax :2.5 , //    the percentage of the y axis in integer precentage \n                currentPayout : 1,   //  current position \n                testPoints  : [\n                    [0,0],  //  at zero seconds the payout is 1\n                    [0.1,0.01]\n                ],\n                lastPayout : (Math.random() * 10),\n                timeReaming : 0,\n                currentTick:0,\n                crashed : false,\n                waitingForNextRound : false,\n                \n            });\n            setTimeout(()=>{\n                _this.startGameLoop();\n            },16)\n        }else{\n            // we should place random \"bot bets\"\n            if(this.state.timeReaming % 10 == 0){\n                this.submitBotWager(100,200)\n\n            }\n            \n\n\n\n\n            //  if there is a wager then we can submit it \n            if(this.state.nextRoundWager.value){\n                //  lock it in as my wager for \n                //  the round \n                this.submitWager(this.state.nextRoundWager.value,this.state.nextRoundWager.autoCashout);\n                this.setState({\n                    nextRoundWager : {}\n                })\n            } else if (this.state.autoBetParameter.enabled){\n                //  if the auto bet is enabled we should submit the \n                //  wager and then incriment the paraments \n            }\n\n            _this.setState({\n                timeReaming : this.state.roundStart - (new Date()).getTime(),\n                \n            })\n            setTimeout(()=>{\n                _this.roundPreperationLoop();\n            },0)\n        }\n        \n    }\n\n\n\n\n    //  function to get the formula at a point \n    getPayoutAtTick(t){\n\n        //  this is a peice wise function that will return a 2 decimal \n        //  value for the payout at that time \n        if(t < 10472){  //  all the value is less than 10 seconds \n            //  for this one its just a linear function \n            let y = (t/1000) * 0.2 //    its just a constat\n            \n            \n            return y;\n        }else {\n            //  here we have a devently shallow parabolic that will go up \n            //  and interesects with the function above\n            let y = Math.pow( (t/1000) + 4,2 ) / 100\n            \n            \n            return y\n        }\n    }\n\n\n\n\n\n    placeManualBet(betAmmount,autoCashout){\n        console.log(betAmmount,autoCashout)\n        //  there are 2 time to palce bet, \n        if(this.state.roundStart > (new Date()).getTime()){\n            //  1 is when we are in the interound stage and when placed cannot cancle \n            this.submitWager(betAmmount,autoCashout);\n        }else{\n            //  2 when we are in the round and we can cancel our bet until the intersage\n            this.setState({\n                nextRoundWager : {\n                    name : \"test account\",\n                    value : betAmmount,\n                    autoCashout : autoCashout,\n                    currenty : this.state.selectedCurrency\n                }\n            })\n        }\n        \n\n        \n        \n    }\n\n    cashout(){\n        //  cashout this is just for me but i will need to change it \n        //  later with the server \n        \n        let myWager = this.state.currentWager\n        myWager.cashout = this.state.currentTick;\n        myWager.payout = this.state.currentPayout;\n        \n        this.setState({\n            currentWager : myWager\n        })\n        this.addNotificationCenterMessage({message:myWager.name + \" cashed out at $\" + (parseFloat(myWager.value) * this.state.currentPayout) + \"!\",image : myWager.currency.image})\n    }\n\n    cashoutBot(bot_wager){\n        console.log(\"payed out bot\",bot_wager)\n        bot_wager.cashout = this.state.currentTick.toString();\n        bot_wager.payout = this.state.currentPayout.toString();\n        this.addNotificationCenterMessage({message:bot_wager.name + \" cashed out at $\" + (parseFloat(bot_wager.value) * this.state.currentPayout) + \"!\",image : bot_wager.currency.image})\n    }\n    \n\n    submitWager(betAmmount,autoCashout){\n        // so we will submit it (future to the server)\n        let wagers = this.state.wagers;\n        let wager = {\n            name : internet.userName(),\n            value : betAmmount,\n            autoCashout : autoCashout,\n            currency : this.state.selectedCurrency\n        }\n        wagers.push(wager)\n        console.log(wagers)\n\n        this.setState({\n            wagers : wagers,\n            currentWager : wager\n        })\n\n    }\n    submitBotWager(betAmmount,autoCashout){\n        // so we will submit it (future to the server)\n        \n        let wagers = this.state.wagers;\n        let wager = {\n            name : internet.userName(),\n            value : (Math.floor(Math.abs(Math.random() - Math.random()) * (1 + 300.25 - 1.25) + 1.25)).toString(),\n            autoCashout : autoCashout,\n            currency : coins[Math.floor(Math.random() * coins.length)],\n            pull_out : (Math.floor(Math.abs(Math.random() - Math.random()) * (1 + 3000 - 100.01) + 100.01)),\n            bot : true\n        }\n        wagers.push(wager)\n        console.log(wagers)\n\n        this.setState({\n            wagers : wagers\n        })\n\n    }\n\n\n    cancelWager(){\n        console.log(\"cancleing wager\")\n        this.setState({\n            \n            nextRoundWager : {}\n        })\n    }\n\n\n\n\n\n    render(){\n        const { wagers , \n                currentWager, \n                nextRoundWager,\n                xMin , \n                yMax,\n                timeReaming, \n                crashed , \n                testPoints ,\n                currentPayout, \n                payoutHistory,\n                currentTick,\n                waitingForNextRound,\n                selectedCurrency\n                } = this.state;\n        var _this = this;\n        //  get the last point \n        let boostGameWindow = (\n                        <div class=\"boost-game-wrapper\">\n                            <div class=\"boost-game-top-wrapper\">   \n                                <div class=\"boost-graph-wrapper\">\n                                    \n                                    <BoostLine \n                                        testPoints={testPoints}\n                                        xMax={currentTick / 1000}\n                                        xMin={xMin}\n                                        yMax={yMax}\n                                        wagers={wagers}\n                                    />\n                                    <BoostRocket \n                                        testPoints={testPoints}\n                                        xMax={currentTick / 1000}\n                                        crashed={crashed}\n                                        yMax={yMax}\n                                        xMin={xMin}\n                                    />\n                                    <BoostPayoutNumber \n                                        crashed={crashed}\n                                        currentPayout={currentPayout} \n                                        wager={currentWager}\n                                    />\n                                    \n                                </div>\n                            \n                                <BoostXaxis xMax={currentTick / 1000} xMin={xMin} />\n                            </div>\n                            <div id=\"y-axis\" class=\"boost-game-bottom-wrapper\">\n                            <div class=\"boost-y-axis-wrapper\">\n                                    <BoostYaxis \n                                        yMax={yMax}\n                                        step={0.1}\n                                    />\n                                </div>\n                                \n                            </div>\n                            \n                        </div>\n        );\n        //  if the next round hasnt started yet \n        if(this.state.roundStart > (new Date()).getTime()){\n            boostGameWindow =  (\n                < RoundPreStart  \n                timeRemaining={(timeReaming/1000).toFixed(2)} \n                />\n            )\n        }\n        //console.log(wagers)\n        return (\n\n            <>\n            <div className=\"boost-wrapper shadow-lg\" >\n                <div className=\"boost-header-wrapper\" >\n                    < Header >\n                        <WalletDropDown\n                        coins={this.state.coins}\n                        selectCurrency={(currency)=>{\n                            this.setState({\n                                selectedCurrency : currency\n                            })\n                        }}\n                        \n                        selectedCurrency={selectedCurrency} />\n                    </ Header>\n                </div>\n                <div className=\"boost-main-wrapper\" >\n                    <div className=\"boost-session-wrapper\">\n                        <div style={{marginRight:\"   0rem\"}}>\n                            <BettingPannel \n                                crashed={crashed}\n                                wagers={wagers} \n                                nextRoundWager={nextRoundWager}\n                                currentWager={currentWager}\n                                currentPayout={currentPayout}\n                                //  for the notification center \n                                logMessage={(message)=>{\n                                   // _this.addNotificationCenterMessage(message);\n                                    console.log(message.title)\n                                }}\n\n\n                                //  will let us kknow if we are in the intersage\n                                waitingForNextRound={waitingForNextRound}\n                                placeManualBet={(betAmmount,cashout)=>{\n                                    //  \n                                    _this.placeManualBet(betAmmount,cashout)\n                                }}\n                                cashout={()=>{\n                                    _this.cashout()\n                                }}\n                                cancelBet={()=>{\n                                    _this.cancelWager()\n                                }}\n                            />\n                        </div>\n                        {boostGameWindow}\n                        \n                    </div>\n                </div>\n                <div className=\"boost-footer-wrapper\" >\n                    <Footer>\n                        < HistoryBar payoutHistory={payoutHistory} />\n                    </Footer>\n                    \n                </div>\n           \n            </div>\n            <div\n                style={{padding : \"1rem\",maxHeight : \"500px\", overflowY : \"scroll\"}}\n            >\n                  {this.state.notificationCenterMessage.map(x=><div style={{padding :\"0.5rem\", display : \"flex\", alignItems : \"center\"}} ><img \n                    style={{height : \"18px\", width : \"18px\",  marginRight : \"1rem\"}}\n                    src={require(\"./icons/\"+x.message.image)}\n                  />{x.message.message}</div>)}\n            </div>\n          \n            </>\n\n\n\n\n            \n        \n\n\n\n        \n        )\n    }\n}\n\n\n\nexport default withParse(BoostGameBase);\n","import React from 'react';\n \nimport './App.css';\n \n\n \nimport BoostGame from './components/boostGame'\nfunction App() {\n    return (\n          <BoostGame />\n           \n \n       \n    );\n  }\n  \n  export default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n    <App /> \n  \n  \n  , document.getElementById('boost_game_container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bank.f306cda7.svg\";","module.exports = __webpack_public_path__ + \"static/media/BAT.8ebed5e7.svg\";","module.exports = __webpack_public_path__ + \"static/media/Bitcoin.d7876d48.svg\";","module.exports = __webpack_public_path__ + \"static/media/XRP.d47fb469.svg\";","module.exports = __webpack_public_path__ + \"static/media/betacoin.22a9cab5.png\";","module.exports = __webpack_public_path__ + \"static/media/betacoin1.32f9a94e.svg\";","module.exports = __webpack_public_path__ + \"static/media/dogecoin.605642c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/eos.81713350.svg\";","module.exports = __webpack_public_path__ + \"static/media/ethereum.18708d3e.svg\";","module.exports = __webpack_public_path__ + \"static/media/isk.804ad7d2.png\";","module.exports = __webpack_public_path__ + \"static/media/litecoin.c151518b.svg\";","module.exports = __webpack_public_path__ + \"static/media/monero.f9caaf1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/information-dark.19072fe2.svg\";"],"sourceRoot":""}