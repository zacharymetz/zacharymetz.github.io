{"version":3,"sources":["components/boostGame/icons sync /^/.//.*$","components/liveStream/assets/loading.svg","components/boostGame/icons/bank.svg","components/liveStream/assets/coin.svg","components/liveStream/assets/coinstack.svg","components/liveStream/assets/rich.svg","components/boostGame/icons/BAT.svg","components/boostGame/icons/Bitcoin.svg","components/boostGame/icons/XRP.svg","components/boostGame/icons/betacoin.png","components/boostGame/icons/betacoin1.svg","components/boostGame/icons/dogecoin.svg","components/boostGame/icons/eos.svg","components/boostGame/icons/ethereum.svg","components/boostGame/icons/isk.png","components/boostGame/icons/litecoin.svg","components/boostGame/icons/monero.svg","components/boostGame/information-dark.svg","components/session/context.js","components/parse/context.js","components/parse/parseapi.js","components/liveStream/components/NewMessageInput.js","components/liveStream/components/LiveChatMessages.js","components/liveStream/components/chatUserSettings.js","components/liveStream/components/Coins.js","components/liveStream/index.js","components/boostGame/baseGame.js","components/boostGame/betting.js","components/boostGame/bars.js","components/boostGame/index.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","React","createContext","ParseContext","withParse","Component","props","Consumer","parse","ParseAPI","NewMessageInputBase","onChange","event","target","name","value","length","state","maxLength","remainingSteps","ActualValue","setState","superchatValue","inputState","username","profilePicture","messageBody","superchatValueSlider","room","this","chatMessage","extend","set","User","current","attributes","publicProfile","save","then","error","alert","message","superChatAmmount","_this","message_input","className","src","style","textAlign","rows","type","min","max","step","onClick","togglePopupMenu","class","sendMessage","LiveChatMessagesBase","console","log","messages","timeStamp","Date","getTime","user","scrolled","menuOpen","roomObject","users","loadHistoricalMessages","subscribeToChatRoomMessages","updateScroll","messageObject","push","startTime","document","getElementById","element","scrollTop","scrollHeight","MessagesList","i","body","showTimeStamp","parseTimeStamp","justifyContent","alignItems","background","overflowY","color","height","width","require","onScroll","LiveChatMessage","timestamp","profilePicString","flexGrow","h","getHours","m","getMinutes","ChatOverlay","visible","toggleVisibility","children","UserMenuBase","UpdateUserName","UpdateUserNameBase","onSubmit","UserMenuWindow","CoinsMenuBase","payment","Cloud","run","innerElement","createPaymnet","CoinShop","margin","CoinRow","display","flexDirection","img","coins","CoinRowItem","fontSize","marginBottom","CoinShopMenu","LiveChatBase","showSettingsMenu","showCoinMenu","roomid","loadedRoom","noUser","loadRoom","toggleSettingsMenu","Coins","toggleCoinMenu","open","toggle","toggleTimeStampView","toggleCoinsMenu","LiveChatMessages","NewMessageInput","LiveChatPopupMenu","classes","BoostRocket","lastAngle","xMin","xMax","top","testPoints","yMax","right","P1","P2","hyp","Math","sqrt","pow","adj","angle","acos","PI","left","transform","transformOrigin","DefaultRocketSprite","BoostYaxis","offset","clientHeight","currentStep","numberedTicks","items","n","elements","totalItems","interval","floor","distributedCopy","tickElements","tickHeight","NumberedTick","majorTick","reverse","hight","bottom","round","BoostXaxis","clientWidth","tickWidth","XaxisTick","BoostPayoutNumber","myPayoutElemnt","crashed","wager","currentPayout","parseFloat","toFixed","payout","BoostLine","wagers","lines","x1","y1","x2","y2","stroke-linecap","stroke","strokeWidth","borderRadius","key","wagerElements","x","cashout","y","multiplyer","tick","RoundPreStart","timeRemaining","LineWagerItem","elmID","replace","c","r","random","v","toString","hover","onMouseEnter","onMouseOver","position","zIndex","currency","image","BettingPannel","betType","currentWager","cancelBet","nextRoundWager","waitingForNextRound","selectedCurrency","bettingInput","selectCurrency","placeManualBet","logMessage","Button","selectBetType","size","marginRight","paddingTop","overflow","ManualBet","betAmmount","autoCashout","betPlaced","title","betButton","block","submitBet","betOverlayStyles","backgroundColor","disabled","betWindow","padding","InputGroup","InputGroupAddon","addonType","Input","paddingBottom","PlacedBets","testPlayers","AutoBet","betChashout","totalBets","onWin","onWinIncrease","onLoss","onLossIncrease","stopAtProfit","stopAtLoss","outline","Footer","HistoryBar","historyElements","payoutHistory","PayoutHistoryElement","Header","MaxProfitIndicator","useState","tooltipOpen","setTooltipOpen","Tooltip","placement","isOpen","WalletDropDown","listOfCoins","dropdownToggle","dropdownOpen","dropDownItems","coin","DropdownItem","fontWeight","marginright","marginLeft","ammount","DropdownToggle","caret","flexWrap","Dropdown","DropdownMenu","header","divider","NotificationCenterMessage","dismissTimer","setTimeout","close","Alert","BoostGameBase","currentTick","lastPayout","roundStart","timeReaming","autoBetParameter","enabled","baseValue","cashoutValue","stopAtLost","autoBetCounters","wagerSum","notificationCenterMessage","inializeConnection","startGameLoop","wallet","subscribe","walletSubscription","on","object","unshift","dissmissMessage","dismissed","getPayoutAtTick","endBoostRound","roundPreperationLoop","submitWager","t","currenty","myWager","boostGameWindow","cancelWager","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2067953.chunk.js","sourcesContent":["var map = {\n\t\"./BAT.svg\": 925,\n\t\"./Bitcoin.svg\": 926,\n\t\"./XRP.svg\": 927,\n\t\"./bank.svg\": 405,\n\t\"./betacoin.png\": 928,\n\t\"./betacoin1.svg\": 929,\n\t\"./dogecoin.svg\": 930,\n\t\"./eos.svg\": 931,\n\t\"./ethereum.svg\": 932,\n\t\"./isk.png\": 933,\n\t\"./litecoin.svg\": 934,\n\t\"./monero.svg\": 935\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 239;","module.exports = __webpack_public_path__ + \"static/media/loading.7c43cdd5.svg\";","module.exports = __webpack_public_path__ + \"static/media/bank.f306cda7.svg\";","module.exports = __webpack_public_path__ + \"static/media/coin.651b35e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/coinstack.b9d61669.svg\";","module.exports = __webpack_public_path__ + \"static/media/rich.791e4bd3.svg\";","module.exports = __webpack_public_path__ + \"static/media/BAT.8ebed5e7.svg\";","module.exports = __webpack_public_path__ + \"static/media/Bitcoin.d7876d48.svg\";","module.exports = __webpack_public_path__ + \"static/media/XRP.d47fb469.svg\";","module.exports = __webpack_public_path__ + \"static/media/betacoin.22a9cab5.png\";","module.exports = __webpack_public_path__ + \"static/media/betacoin1.32f9a94e.svg\";","module.exports = __webpack_public_path__ + \"static/media/dogecoin.605642c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/eos.81713350.svg\";","module.exports = __webpack_public_path__ + \"static/media/ethereum.18708d3e.svg\";","module.exports = __webpack_public_path__ + \"static/media/isk.804ad7d2.png\";","module.exports = __webpack_public_path__ + \"static/media/litecoin.c151518b.svg\";","module.exports = __webpack_public_path__ + \"static/media/monero.f9caaf1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/information-dark.19072fe2.svg\";","import React from 'react';\n\nconst AuthUserContext = React.createContext(null);\n\nexport default AuthUserContext;","import React from 'react';\n\nconst ParseContext = React.createContext(null);\n\n\nexport const withParse = Component => props => (\n  <ParseContext.Consumer>\n    {parse => <Component {...props} parse={parse} />}\n  </ParseContext.Consumer>\n);\n\nexport default ParseContext;\n","import { coinList } from '../../constants/coins';\n\n\n\nclass ParseAPI {\n  constructor() {\n    this.parse = require('parse');\n    //  this is the connected\n    this.parse.initialize(\"backend\");\n    this.parse.serverURL = 'https://api.logicx.ca'\n    //  this is where we can inisialize some of ther services \n\n    //  add the authchage function \n    this.parse.onAuthChangeListeners = [];\n    var _this =  this;\n    this.parse.onAuthChange = function(listener){\n      console.log(\"adding event listners\")\n      _this.parse.onAuthChangeListeners.push(listener);\n    }\n    this.parse.triggerOnAuthChange = function(){\n\n      var user = _this.parse.User.current()\n      _this.parse.onAuthChangeListeners.forEach((elm)=>{\n        elm(user);\n      })\n    }\n\n    \n\n  }\n  // down here is where we create function that will wrap around the parse api thing \n  async loginUser(email,password){\n    console.log(\"ASDASDASD\")\n    try{\n      \n      const user = await this.parse.User.logIn(email, password);\n      console.log(\"loggedinb\")\n      this.parse.triggerOnAuthChange(user);\n    }catch(error){\n      console.log(error)\n      throw error\n    }\n      \n  }\n\n  async createNewUser(username,email,password){\n    \n    //  make a new user \n    var user = new this.parse.User();\n    user.set(\"username\", email);\n    user.set(\"email\", email)\n    user.set(\"password\", password);\n    //  create a new public profile with the username\n    //  new account image \n    var PublicProfile = this.parse.Object.extend(\"publicProfile\");\n    var publicProfile = new PublicProfile();\n    publicProfile.set('username',username);\n    //  give them a random profile pic\n    publicProfile.set('profilePicture',\"https://i.pravatar.cc/150?img=\"+(Math.floor(Math.random() * 70) + 1).toString());\n    user.set(\"publicProfile\",publicProfile)\n    \n\n    //  create a private profile that only the user can see \n    //  for things relating to thier account \n    var PrivateProfile = this.parse.Object.extend(\"privateProfile\");\n    var privateProfile = new PrivateProfile();\n\n\n    //  set up all of the feilds for the user (TODO MOVE TO CLOUD CODE)\n    privateProfile.set(\"displayTotalWagers\", true);\n    privateProfile.set(\"displayAmmountWagered\", true);\n    privateProfile.set(\"maskSensitiveInformation\", false);\n    privateProfile.set(\"incognitoMode\", false);\n\n    privateProfile.set(\"name\", null);\n    privateProfile.set(\"dob\", new Date());  //  set dob to now\n    privateProfile.set(\"country\", \"\");\n\n    user.set(\"privateProfile\",privateProfile)\n    //  create the wallet for the user with all the currency from \n    //  coins / copnfig with a bunch of BAT for testing (MOVE TO COULD CODE)\n    var UserWallet = this.parse.Object.extend(\"userWallet\");\n    var userWallet = new UserWallet();\n    \n    //  sets all the coins in the app from the constants \n    for(let coin of coinList){\n      //  \n      userWallet.set(coin.name,0.0);\n    }\n\n    user.set(\"userWallet\",userWallet);\n    //  sign up the user \n    await user.signUp();\n    //  set public read access on the public profile and the user \n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(true);\n    publicProfile.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await publicProfile.save();\n    \n    //  set the private profile to not public access \n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(false);\n    privateProfile.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await privateProfile.save();\n\n    //  set the private profile to not public access \n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(false);\n    userWallet.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await userWallet.save();\n\n    //  done createing a new user trigger an auth change \n    this.parse.triggerOnAuthChange(user);\n    return \n    \n  }\n\n  \n\n  async createNewAnonUser(){\n    console.log(\"created anno user\");\n    //  so make a new new user name for this person \n    var username = \"anon_\" + makeid(7);\n    \n    //  generate a random passowrd \n    var password = makeid(64) + \"Q\";\n    //  sign them up \n    var user = new this.parse.User();\n    user.set(\"username\", username);\n    user.set(\"password\", password);\n    //user.set(\"profilePicture\", \"https://i.pravatar.cc/150?img=\"+(Math.floor(Math.random() * 70) + 1).toString())\n    //  make a public profile for the user so they can \n    //  have some data that is saved with all the chat stuff\n    var PublicProfile = this.parse.Object.extend(\"publicProfile\");\n    var publicProfile = new PublicProfile()\n    publicProfile.set('username',username);\n    publicProfile.set('profilePicture',\"https://i.pravatar.cc/150?img=\"+(Math.floor(Math.random() * 70) + 1).toString());\n    // other fields can be set just like with Parse.Object\n    user.set(\"publicProfile\",publicProfile)\n    \n    \n    await user.signUp();\n    var acl = new this.parse.ACL();\n    acl.setPublicReadAccess(true);\n    publicProfile.setACL(acl);\n    acl.setWriteAccess(this.parse.User.current().id, true);\n    await publicProfile.save();\n\n    var user = this.parse.User.current();\n    var userAcl = new this.parse.ACL(user)\n    user.setACL(userAcl);\n\n\n    //  after we need to do the private data thing and \n    //  it will hold all of the virual \"items\" your \n    //  account holds (move this to the after user create trigger )\n    //  so that the user does not have access to this part \n    var Inventory = this.parse.Object.extend(\"Inventory\");\n    var inventory = new Inventory();\n    inventory.setACL(new this.parse.ACL(this.parse.User.current()));\n    \n    //  set the ammount of coins the account has \n    inventory.set(\"coins\", 0);\n\n    this.parse.User.current().set(\"inventory\", inventory);\n\n   \n    \n    \n    this.parse.triggerOnAuthChange();\n    \n  }\n\n  \n\n  //  this function will call its own parse thing \n  //  and say it wants to remove its session \n  async signOutCurrentUser(){\n    await this.parse.User.logOut();\n    this.parse.triggerOnAuthChange();\n  }\n    \n  \n  \n}\nfunction makeid(length) {\n  var result           = '';\n  var characters       = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n  for ( var i = 0; i < length; i++ ) {\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\nexport default ParseAPI;","import React, { Component } from \"react\";\n\nimport {withParse} from '../../parse'\n//  lets move the input to its own componet so that\n//  it can be used to do a donated chat too \nclass NewMessageInputBase extends Component{\n    constructor(props){\n        super(props)\n        var _this = this;\n        // console.log(this.props.parse.parse.User.current())\n        // this.props.parse.parse.onAuthChange((user)=>{\n        //     console.log(user)\n        //     _this.setState({username:user.username});\n        // })\n        this.state = {\n\n            inputState : \"message\", //   message || superchat\n            \n            username : \"\",\n            profilePicture : \"\",\n            messageBody : \"\",\n            maxLength : 200,\n            superchatValue : 0, //  in coins \n            superchatValueSlider: 0,\n            room : this.props.room\n        }\n    }\n    //  it will be in gems \n    openSuperChatMenu(ammount=20){\n\n    }\n    onChange = event => {\n        //  if the target value is bigger than max text then \n        //  this is the catch for the max length thing \n        if(event.target.name == \"messageBody\" &&event.target.value.length > this.state.maxLength){\n\n            return;\n        }\n        \n        if(event.target.name == \"superchatValueSlider\"){\n            // change the number value based on the \n            //  slider value \n\n            //  so the slider will be diviede in differnt protuion \n\n            //  1-5 , 5\n            var remainingSteps = event.target.value;\n            var ActualValue = 0;\n            while(remainingSteps > 0){\n                if(remainingSteps > 48){\n                    ActualValue = ActualValue + 500;\n                }else if(remainingSteps > 31){\n                    //  5-25 , 5 stap\n                    ActualValue = ActualValue + 100;\n                }else if(remainingSteps > 13){\n                    //  25-150 . 6 steps\n                    ActualValue = ActualValue + 50;\n                }else if(remainingSteps > 10){\n                    //  150-1000, steps of 50 17 steps\n                    ActualValue = ActualValue + 25;\n                }else if(remainingSteps > 5){\n                    //  1000-2500 steps of 100 15 steps\n                    ActualValue = ActualValue +5;\n                }else {\n                    //  rest is steps of 500 remainder\n                    ActualValue = ActualValue + 1;\n                }\n                remainingSteps --;\n            }\n            \n            \n            \n            this.setState({\n                superchatValue : ActualValue\n            })\n            \n\n            \n            \n            \n        }\n        this.setState({ [event.target.name]: event.target.value });\n      };\n    sendMessage(){\n        //  get the stuff \n        \n       \n        const { messageBody, room,inputState,superchatValue } = this.state;\n        if(messageBody.length == 0){\n            return;\n        }\n        //  create a new message object \n        const ChatMessages = this.props.parse.parse.Object.extend(\"ChatMessages\");\n        const chatMessage = new ChatMessages();\n\n        chatMessage.set(\"user\", this.props.parse.parse.User.current());\n        chatMessage.set(\"livechatroom\", room);\n        chatMessage.set(\"messageBody\", messageBody);\n        chatMessage.set(\"userProfile\",this.props.parse.parse.User.current().attributes.publicProfile)\n        if(inputState == \"superchat\"){\n            //  is it a super chat so we should set the related feilds\n            //  and let the cloud code handle it \n            chatMessage.set(\"superchat\" , true)\n            chatMessage.set(\"superchatValue\" , superchatValue);\n        }\n        chatMessage.save().then((chatMessage) => {\n        // Execute any logic that should take place after the object is saved.\n        //console.log(chatMessage);\n            this.setState({\n                messageBody : \"\"\n            })\n        }, (error) => {\n        // Execute any logic that should take place if the save fails.\n        // error is a Parse.Error with an error code and message.\n        alert('Failed to create new object, with error code: ' + error.message);\n        });\n        //  give it this room and user \n\n        //  set the body \n\n\n        //  check if a super chat, if so do nothiung\n\n\n        //  if not just save the message object \n\n        // reset the inital state \n    }\n    render(){\n        var _this = this;\n        const {  messageBody, maxLength ,superchatValue,superchatValueSlider} = this.state;\n\n        //  if its a super chat we need to do a few things \n\n        //  fisrt we need to add some color arrown the user and message\n        //  add the ammount below the user name, \n\n        //  second is the ammount with a slider at the bottom\n\n        //  and swap out the old menue for the a new one that \n\n        //  says buy and send \n        var profilePicString = \"https://picsum.photos/200\"\n        \n\n        var message_input = (\n            <div className=\"live-chat-input-main\">\n                        <img src={profilePicString} className=\"live-chat-profile-pic\" />\n                    \n                        <div className=\"live-chat-input-wapper\">\n                            <div  className=\"live-chat-message-username\" style={{textAlign:\"left\"}}>\n                                {this.props.username}\n                            </div>\n                            <textarea  \n                            name=\"messageBody\"\n                            value={messageBody}\n                            onChange={this.onChange}\n                            className=\"live-chat-input-body\"/>\n                            \n                        </div>\n                    </div>\n        );\n        var superChatAmmount //= (<div></div>);\n        if(this.state.inputState == \"superchat\"){\n            message_input = (\n                <div className = \"\">\n\n                \n                    <div className=\"live-chat-input-main superchat-main\">\n                            <img src=\"https://picsum.photos/200\" className=\"live-chat-profile-pic superchat-profile-pic\" />\n                        \n                            <div className=\"live-chat-input-wapper\">\n                                <div  className=\"live-chat-message-username live-chat-message-username-superchat\" style={{textAlign:\"left\"}}>\n                                {this.props.username}\n                                </div>\n                                <div className=\"live-chat-superchat-value\" style={{textAlign:\"left\"}}>\n                                    {superchatValue} Coins\n                                </div>\n                                \n                            </div>\n                        </div>\n                        <textarea  \n                        name=\"messageBody\"\n                        value={messageBody}\n                        onChange={this.onChange}\n                        rows={2}\n                        className=\"live-chat-input-body live-chat-input-body-superchat\"/>\n                    </div>\n            )\n            superChatAmmount = (<div>\n                <input type=\"number\"\n                 value={superchatValue} \n                 name=\"superchatValue\"\n                 onChange={this.onChange}\n                />\n                <input type=\"range\" \n                value={superchatValueSlider}\n                onChange={this.onChange} \n                name=\"superchatValueSlider\" \n                min=\"0\" \n                max=\"60\"  \n                step=\"1\"></input>\n            </div>)\n\n        }\n        \n\n\n        return (\n            \n            <div className=\"live-chat-input\">\n                    {message_input}\n                    {superChatAmmount}\n                    <div className=\"live-chat-input-menu\">\n                    <div className=\"live-chat-menu-button\">\n                        <div className=\"live-chat-menu-button-icon\" \n                            onClick={()=>{\n                                _this.props.togglePopupMenu()\n                            }}>\n\n                        </div>\n                    </div>\n                             \n                            <div className=\"live-chat-input-menu-button flex-grow-end\">\n                                <div className=\"live-chat-input-length-count\">\n                                   {messageBody.length} / {maxLength}\n                                </div>\n                                <div class=\"send-icon\"\n                                onClick={()=>{\n                                    // console.log(\"asdasd\")\n                                    _this.sendMessage()\n                                }}\n                                >\n\n                                </div>\n                            </div>\n                        </div>\n                </div>\n        )\n    }\n}\nexport default  withParse(NewMessageInputBase)","import React, { Component } from \"react\";\n\nimport {withParse} from '../../parse'\nimport { conditionalExpression } from \"@babel/types\";\nclass LiveChatMessagesBase extends Component{\n    constructor(props){\n        \n        super(props);\n        var _this = this;\n        console.log(props)\n        this.state = {\n            messages : [\n                {\n                                username : \"profile.attributes.username\",\n                                id : \"results[i].id\",\n                                messageBody : \"results[i].attributes.messageBody\",\n                                timeStamp : new Date().getTime(),\n                                user : \"results[i].attributes.user\",\n                                profilePicture : \"profile.attributes.profilePicture\",\n                                superchatValue : \"asdasdasd\"\n                            }\n            ],\n            scrolled : false,\n            menuOpen : false,\n            roomObject : this.props.room,\n            users : []\n            \n        }\n        this.loadHistoricalMessages()\n        this.subscribeToChatRoomMessages();\n         \n    }\n    async loadHistoricalMessages(){\n        // var _this = this;\n        // var ChatMessages = this.props.parse.parse.Object.extend(\"ChatMessages\");\n        // var query = new this.props.parse.parse.Query(ChatMessages);\n        \n        // query.equalTo(\"livechatroom\",_this.props.room);\n        // var message = this.state.messages;\n        // const results = await query.find();\n\n        // var PublicProfile = this.props.parse.parse.Object.extend(\"publicProfile\");\n        // var query1 = new this.props.parse.parse.Query(PublicProfile);\n        // console.log(results.map(x=>x.attributes.userProfile.id))\n        // var idList = results.map(x=>\n        //     x.attributes.userProfile.id\n        // )\n        \n        // var profiles = await query1.find({ \"_id\": { \"$in\": idList }});\n        // console.log(\"asdasdasd\",profiles);\n        // console.log(results)\n        // //  do a batch get for all the profiles in the \n        // //  chat messages var PublicProfile = this.props.parse.parse.Object.extend(\"publicProfile\");\n            \n        // for (let i = 0; i < results.length; i++) {\n            \n             \n             \n        //     var profile = profiles.filter(x=> x.id == results[i].attributes.userProfile.id)[0];\n        //     if(results[i].attributes.superchat){\n        //         //  we have an existsing super chat so we should do \n        //         //  some math to figure out how long and\n        //         //  if we are done it \n\n        //         //  if not then we can add it to the\n        //         //  list there \n        //     }\n        //         message.push({\n        //             username : profile.attributes.username,\n        //             id : results[i].id,\n        //             messageBody : results[i].attributes.messageBody,\n        //             timeStamp : results[i].createdAt,\n        //             user : results[i].attributes.user,\n        //             profilePicture : profile.attributes.profilePicture,\n        //             superchatValue : results[i].attributes.superchatValue\n        //         })\n            \n            \n        //   }\n        // this.setState({\n        //     messages : message,\n        //     scrolled : false\n        // })\n        this.updateScroll();\n    }\n\n    async subscribeToChatRoomMessages(){\n        \n        // var _this = this;\n        // //  make a new object for the ChatMessages object and which have a\n        // //  relation to the room object that this should be for \n        // var ChatMessages = this.props.parse.parse.Object.extend(\"ChatMessages\");\n        // var  query = new this.props.parse.parse.Query(ChatMessages);\n        // query.equalTo(\"livechatroom\",_this.props.room);\n        // var subscription = await query.subscribe();\n\n        \n        // subscription.on('create', async (object) => {\n        //     console.log(object)\n            \n        //     //  TODO if the user is not cached then we get it \n        //     //  and add them to the list \n        //     var PublicProfile = this.props.parse.parse.Object.extend(\"publicProfile\");\n        //     var query = new this.props.parse.parse.Query(PublicProfile);\n        //     var profile = await query.get(object.attributes.userProfile.id)\n        //     //  a new message was created \n\n\n\n\n        //     if(object.attributes.superchat){\n        //         _this.addSuperChatMessage({\n        //             username : profile.attributes.username,\n        //             id : object.id,\n        //             messageBody : object.attributes.messageBody,\n        //             timeStamp : object.createdAt,\n        //             user : object.attributes.user,\n        //             profilePicture : profile.attributes.profilePicture,\n\n        //             //  the other things down here \n        //             superchatValue : object.attributes.superchatValue\n        //         })\n        //     }else{\n        //         _this.addMessage({\n        //             username : profile.attributes.username,\n        //             id : object.id,\n        //             messageBody : object.attributes.messageBody,\n        //             timeStamp : object.createdAt,\n        //             user : object.attributes.user,\n        //             profilePicture : profile.attributes.profilePicture\n        //         })\n        //         console.log(new Date(object.createdAt))\n        //         this.updateScroll();\n        //     }\n\n            \n\n            \n             \n        // });\n        // console.log(\"attempting to subscribe\")\n        \n    }\n    addMessage(messageObject){\n        //  will add a new message to the list and set \n        //  the state \n        var messages = this.state.messages;\n        messages.push(messageObject);\n\n        this.setState({messages : messages});\n        \n        \n    }\n    //  so basically what this is is it will add a new messages that \n    //  floats to the top of the message thing and has a differn color \n    //  depending on its value that was donated \n    addSuperChatMessage(messageObject){\n        //  first we push it to the list and let the render function \n        //  deal with how it is going to be \n        var messages = this.state.messages;\n        messages.push(messageObject);\n\n        //  make a new object for the top that will refernce the super chat \n        //  with the ammount of coins,\n\n        //  the ammount of time it is up is dependant on the ammount \n        //  of coins given to the super chat \n\n    }\n    insertSuperChatObject(value,startTime){\n        //  will make a super jact object that this refernces \n    }\n    updateScroll(){\n        console.log(document.getElementById(\"live-chat-messages\"))\n        debugger\n        if( document.getElementById(\"live-chat-messages\") != null){\n            var element = document.getElementById(\"live-chat-messages\");\n            console.log(\"asdasd\")\n            element.scrollTop = element.scrollHeight;\n        }\n    }\n    componentDidUpdate(){\n        console.log(\"componet update\")\n        \n    }\n    render(){\n        var _this = this;\n        \n        const { messages } = this.state;\n        var MessagesList = [];\n        for(let i in messages){\n             \n                MessagesList.push(<LiveChatMessage \n                    username={messages[i].username}\n                    body={messages[i].messageBody}\n                    user={messages[i].user}\n                    showTimeStamp={this.props.showTimeStamp}\n                    timeStamp={parseTimeStamp(messages[i].timeStamp)}\n                    profilePicture={messages[i].profilePicture}\n                />);\n             \n        }\n\n\n        if(messages.length == 0){\n            return (<div className=\"live-chat-messages\"\n            id=\"live-chat-messages\" style={{justifyContent:\"center\",alignItems:\"center\", background: \"white\", overflowY : \"hidden\", color : \"#333333\"}} >\n                <img style={{height : \"8rem\",width:\"8rem\"}}\n                src={require('../assets/loading.svg')} />\n                <h4>Loading Message...</h4>\n            </div>)\n        }\n\n        return (<div className=\"live-chat-messages\"\n        id=\"live-chat-messages\"\n        onScroll={()=>{\n            _this.setState({\n                scrolled: true\n            })\n        }}\n        >\n            {MessagesList}\n        </div>)\n    }\n}\n//  make sure we give it parse so it can substribe to message roomes\n\nexport default withParse(LiveChatMessagesBase);\nconst LiveChatMessage = (props)=>{\n    var timestamp = props.timeStamp\n    if(!props.showTimeStamp){\n        timestamp = \" \"\n    }\n    var profilePicString = \"https://picsum.photos/200\"\n        if(props.profilePicture){\n            profilePicString = props.profilePicture;\n        }\n    return (<div className=\"live-chat-message\">\n                <div>\n                        <img src={profilePicString} className=\"live-chat-profile-pic\" />\n                    </div>\n                <div style={{\n                    flexGrow : 1,\n                    textAlign: \"left\"\n                }} className=\"live-chat-message-text-wrapper\">\n                    <span className=\"live-chat-message-username\">\n                        {props.username} {timestamp}\n                    </span>\n                    <span className=\"live-chat-message-text\">\n                        {props.body}\n                    </span>\n                </div>\n                \n            </div>)\n}\n\n\n//  this supporting fucntion will give an appropriate \n//  time stamp for the value \n\n//  lets just show HH:MM PM / AM\nfunction parseTimeStamp(timestamp){\n    var h = new Date(timestamp).getHours();\n    var m = new Date(timestamp).getMinutes();\n\n    h = (h<10) ? '0' + h : h;\n    m = (m<10) ? '0' + m : m;\n\n    return h + ':' + m;\n}\n\n\nfunction superChatValueToColor(value){\n    if(value < 10){\n        return \"blue\"\n    }else if(value < 25){\n        return \"red\"\n    }else if(value < 50){\n        return \"green\"\n    }else if(value < 100){\n        return \"yellow\"\n    }else if(value < 1000){\n        return \"gray\"\n    }else{\n        return \"black\"\n    }\n}","import React, { Component } from \"react\";\nimport './overlay.css'\nimport {withParse} from '../../parse'\n\nexport  class ChatOverlay extends Component{\n    constructor(props){\n        super(props);\n    }\n    \n    render(){\n        var _this = this;\n        var className = \"chat-window-overlay \"\n        \n        if(this.props.visible ){\n            \n            className = className + \" chat-window-overlay-open\"\n        }\n        return (<div  className={className}>\n                <div className=\"overlay-close-btn-wrapper\"\n                    \n                >\n                    <div className=\"overlay-close-btn\"\n                    onClick={()=>{\n                        //  here we will exit the overlayu and go back \n                        _this.props.toggleVisibility()\n                    }}\n                >   </div>\n                </div>\n                    {this.props.children}\n                </div>)\n    }\n}\n\nconst INITAL_STATE = {\n    userName : \"\",\n    \n}\nexport  class UserMenuBase extends Component{\n    constructor(props){\n        super(props);\n         \n    }\n    onChange = event => {\n        //  if the target value is bigger than max text then \n        //  this is the catch for the max length thing \n        \n        this.setState({ [event.target.name]: event.target.value });\n      };\n    render(){\n         \n        return (\n        < ChatOverlay \n            visible={this.props.visible}\n            toggleVisibility={this.props.toggleVisibility}\n        >\n        <UpdateUserName />\n        </ChatOverlay>)\n    }\n}\n\n\nclass UpdateUserNameBase extends Component{\n    constructor(props){\n        super(props);\n       \n    }\n    onChange = event => {\n        //  if the target value is bigger than max text then \n        //  this is the catch for the max length thing \n        \n        this.setState({ [event.target.name]: event.target.value });\n      };\n\n    async onSubmit(){\n        console.log(this.state)\n        var user = this.props.parse.parse.User.current();\n        user.set('username',this.state.username)\n        console.log(user.attributes.publicProfile)\n        user.attributes.publicProfile.set('username',this.state.username)\n        try{await user.save();}catch(e){console.log(e)}\n        \n         \n        console.log(\"yeet the user has been chaged\")\n    }\n    render(){\n        \n        var _this = this;\n        return(\n            <div>\n                <h2>Change User Name</h2>\n                <input\n                name=\"username\" \n                value={\"asd\"} \n                onChange={this.onChange} />\n                <button onClick={()=>{_this.onSubmit()}}>Change Username</button>\n            </div>\n        )\n    }\n}\n\n\n\n\n\nconst UpdateUserName = withParse(UpdateUserNameBase);\n\n\n\nexport const UserMenuWindow = withParse(UserMenuBase);","import React, { Component } from \"react\";\nimport './overlay.css'\nimport {withParse} from '../../parse'\nimport {ChatOverlay} from './chatUserSettings';\n\n\n\n//  now the actual feedback menu there \nclass CoinsMenuBase extends Component{\n    constructor(props){\n        super(props);\n\n        \n        this.state = {\n            payment : null\n        }\n    }\n    async createPaymnet(){\n        //  will ask out server to make a \n        //  paymnet object with either a deal id \n        //  or an ammont of coins \n        this.props.parse.parse.Cloud.run(\"\");\n    }\n    render(){\n        var innerElement = < CoinShop\n        createPaymnet={this.createPaymnet}\n        />;\n        if(this.state.payment){\n            innerElement = \"asdasd\"\n        }\n        return (<ChatOverlay\n            visible={this.props.visible}\n            toggleVisibility={this.props.toggleVisibility}\n\n\n        >   \n            \n                {innerElement}\n                </ChatOverlay>)\n    }\n}\n\nconst CoinShop = (props) =>{\n    return(\n        <div style={{\n            background:\"white\",\n            width : \"100%\",\n            margin:\"1rem\"\n        }}>\n            <h4>Coin Shop</h4>\n            < CoinRow />\n            <CoinShopMenu />\n        </div>\n    )\n}\n\nconst CoinRow =(props)=>{\n    return (<div style={{\n        color : \"black\",\n        display : \"flex\",\n        flexDirection : \"column\",\n        alignItems:\"stretch\",    width: \"100%\",\n        background:\"white\"\n    }}>\n        < CoinRowItem\n        img={require('../assets/coin.svg')}\n        coins={50}\n        value={1.99}\n        />\n        < CoinRowItem\n        img={require('../assets/coinstack.svg')}\n        coins={600}\n        value={8.99}\n        />\n        < CoinRowItem\n        img={require('../assets/rich.svg')}\n        coins={\"2,500\"}\n        value={19.99}\n        />\n    </div>)\n}\nconst CoinRowItem = (props)=>{\n    return (<div className=\"coin-row-item\">\n                <div >\n                    <img src={props.img} className=\"coin-icon-image\" />\n                </div>\n\n                <div className=\"coins-ammount\">\n                    {props.coins}\n                </div>\n\n                <div className=\"buy-coins-button\"\n                onClick={()=>{\n                    console.log(\"asdasd\");\n                }}\n                >   <div style={{fontSize:\"0.75rem\",  marginBottom:\"-0.2rem\"}}>Buy</div>\n                    {props.value}\n                </div>\n            </div>)\n}\n\nconst CoinShopMenu = (props)=>{\n    return(<div className=\"coin-shop-menu\">\n                <div className=\"coin-shop-menu-button\">\n                    More Values\n                </div>\n                <div className=\"coin-shop-menu-button\">\n                    Resore\n                </div>\n            </div>)\n}\n\n\n\n//  this is the purchase screen where you select the payment \n//  methosd, saving it is set by default\nconst PurchaseCoins = (props)=>{\n    return(<div>\n\n            </div>)\n}\n\nexport default  withParse(CoinsMenuBase);","import React, { Component } from \"react\";\n\nimport './livestream.css';\nimport {withParse} from '../parse';\nimport NewMessageInput from './components/NewMessageInput';\nimport LiveChatMessages from './components/LiveChatMessages';\nimport {UserMenuWindow} from './components/chatUserSettings';\nimport CoinsMenu from './components/Coins';\nconst INITIAL_STATE = {\n    username: '',\n    email: '',\n    phone: '',\n    passwordOne: '',\n    passwordTwo: '',\n    error: null,\n};\n  \n\n//  this componeet cna be used by itself for \n//  a stream so people can use it on another \n//  device \nexport class LiveChatBase extends Component{\n    constructor(props){\n        \n        super(props);\n        var _this = this;\n        console.log(props)\n        this.state = {\n            room : {},\n            showTimeStamp : false,\n            showSettingsMenu : false,\n            showCoinMenu: false,\n            roomid:\"ObGzMj3G2E\",\n            loadedRoom : true,\n        }\n        \n        // this code checks to see if the user is authed or not\n        if(true){\n            //  then we make an anoon user \n            console.log(\"creating annon user\")\n             \n            this.state.noUser = true;\n            \n             \n            _this.loadRoom();\n        \n        }else{\n            //  they are loged in \n            this.state.noUser = false;\n            this.state.username = this.props.parse.parse.User.current().attributes.username\n            this.loadRoom();\n        }\n    }\n    async loadRoom(){\n        var _this = this;\n        //  will make a parse qurey after we know there is a user \n        //  and they can send messages \n        \n    } \n    \n    togglePopupMenu(){\n        this.setState({menuOpen : !this.state.menuOpen})\n    } \n    toggleTimeStampView(){\n        this.setState({showTimeStamp : !this.state.showTimeStamp})\n    }\n    toggleSettingsMenu(){\n        console.log(\"toggleingh menu\")\n        this.setState({showSettingsMenu : !this.state.showSettingsMenu})\n    }\n    toggleCoinMenu(){\n        console.log(\"showing coin menu\")\n        this.setState({showCoinMenu : !this.state.showCoinMenu})\n    }\n    \n    render(){\n        var _this = this;\n        \n        if(!this.state.room ){\n            return (<div className=\"live-chat-wrapper\">\n                <div className=\"live-chat-messages\"\n                    id=\"live-chat-messages\" style={{justifyContent:\"center\",alignItems:\"center\", background: \"white\", overflowY : \"hidden\", color : \"#333333\"}} >\n                        <img style={{height : \"8rem\",width:\"8rem\"}}\n                        src={require('./assets/loading.svg')} />\n                        <h3>Loading Chat...</h3>\n                    </div>\n                </div>)\n        }\n        return (\n            <><div>asdasd</div><div className=\"live-chat-wrapper\">\n                <UserMenuWindow  \n                visible={this.state.showSettingsMenu}\n                toggleVisibility={()=>{\n                    _this.toggleSettingsMenu();\n                }}\n                 />\n                <CoinsMenu \n                visible={this.state.showCoinMenu}\n                toggleVisibility={()=>{\n                    _this.toggleCoinMenu();\n                }}\n                />\n                < LiveChatPopupMenu \n                open={this.state.menuOpen}\n                toggle={()=>{\n                    _this.togglePopupMenu()\n                }} \n                toggleTimeStampView={()=>{\n                    _this.toggleTimeStampView();\n                }}\n                toggleSettingsMenu={()=>{\n                    _this.toggleSettingsMenu();\n                }}\n                toggleCoinsMenu={()=>{\n                    _this.toggleCoinMenu();\n                }}\n                />\n                \n                < LiveChatMessages room={this.state.room} showTimeStamp={this.state.showTimeStamp} />\n                <NewMessageInput\n                togglePopupMenu={()=>{\n                    _this.togglePopupMenu()\n                }}\n                room={this.state.room} username={this.state.username} />\n            </div></>\n        )\n    }\n}\nexport const LiveChat = withParse(LiveChatBase);\n\nclass LiveChatPopupMenu extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            open : false\n        }\n    }\n    toggle(){\n        this.setState({open : !this.state.open});\n    }\n    \n    render(){\n        var _this = this;\n        var classes = \"live-chat-popup-menu-wrapper \"\n        if(this.props.open){\n            classes = classes + \"opened\";\n        }\n        return (<div className={classes}>\n                    <div className=\"live-chat-popup-menu shadow\">\n                        <div className=\"live-chat-popup-menu-item\"\n                        onClick={()=>{\n                            _this.props.toggleTimeStampView();\n                            _this.props.toggle()\n                        }}\n                        >\n                            Toggle Timestamps\n                        </div>\n                        <div className=\"live-chat-popup-menu-item\"\n                        onClick={()=>{\n                            _this.props.toggleSettingsMenu();\n                            _this.props.toggle();\n                        }}\n                        >\n                            Settings\n                        </div>\n                        <div className=\"live-chat-popup-menu-item\"\n                        onClick={()=>{\n                            _this.props.toggleCoinsMenu();\n                            _this.props.toggle();\n                        }}\n                        >\n                            Get Coins\n                        </div>\n                        <div className=\"live-chat-popup-menu-item\">\n                            Give Feedback\n                        </div>\n                    </div>\n                </div>)\n    }\n}","import React, { Component } from 'react';\nimport { withParse } from '../parse';\nimport './index.css'\nimport './xaxis.css';\n\n\n\n\n\nexport class BoostRocket extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            lastAngle : 0\n        }\n    }\n    render(){\n        var { xMin, xMax } = this.props; \n        //  first we need to find out where to place the rocket \n        if(xMax < xMin){\n            xMax = xMin\n        }\n        \n        //  to get the top and angle we need the last line\n        let top = 0;\n        top = this.props.testPoints[this.props.testPoints.length-1][1];\n        top = ((1-(top / this.props.yMax))*100) + \"%\";\n        \n        //  lets calculate the right value \n        let right = 0 // = \"-32px\";\n        right = this.props.testPoints[this.props.testPoints.length-1][0] / 1000;\n        right =   \"calc( \"+  ((((right / xMax))*200)-100) + \"% - 32px )\";\n        //console.log(  right)\n\n\n        //  now we have to figure out the angle \n        //  we have the hyp and now need to \n        \n        //  so smooth out the animation \n        let offset = 0;\n        if(this.props.testPoints.length > 22){\n            offset = this.props.testPoints.length - 22 \n        }\n        let P1 = this.props.testPoints[this.props.testPoints.length - 2]\n        \n        let P2 = this.props.testPoints[this.props.testPoints.length-1]\n        let hyp =  (Math.sqrt(Math.pow((P1[0]/ 1000) - (P2[0]/1000),2) + Math.pow(P1[1] - P2[1],2))) ;\n        let adj =  (P2[1] - P1[1]);\n        let angle =  (Math.acos(adj/hyp) * (180/Math.PI))  ;\n        angle = ( angle) \n        //console.log(adj, hyp, angle, P1, P2)\n\n\n\n\n\n        return (\n        <div class=\"boost-rocket-wrapper\">\n            <div class=\"boost-rocket-sprite\" \n            style={{\n                left:right,\n                top:top,\n                transform: \"rotate(70deg)\",\n\n                transformOrigin: \"center top \"\n            }}>\n                \n                < DefaultRocketSprite />\n            </div>\n        </div>\n        )\n    }\n}\n\nexport function DefaultRocketSprite(props){\n    return (\n        <div style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n       }}>\n           <div className =\"rocket-sprite\" />\n           <div className = \"rocket-sprite-flames\" >\n               <div class='fire'>\n                   <div class='flame'></div>\n                   <div class='flame'></div>\n                   <div class='flame'></div>\n                   <div class='flame'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n                   <div class='spark'></div>\n               </div>\n           </div>\n       </div>\n    )\n}\n\n\nexport class BoostYaxis extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            height : 0,\n            offset : 15, //  the offset in px\n        };\n    }\n    componentDidMount() {\n        const height = document.getElementById('y-axis').clientHeight;\n        this.setState({ height });\n      }\n    render(){\n        const { height, offset } = this.state;\n\n        var  { yMax , step } = this.props;\n        //console.log(this.props)\n        yMax++\n        let currentStep = 1 + step;\n        let numberedTicks = [1];\n        while(currentStep <= ((yMax + step )*2)){\n            numberedTicks.push(currentStep);\n            currentStep = currentStep + step;\n        }\n        \n        numberedTicks = distributedCopy(numberedTicks,50);\n        //  now lets build all the delimiter steps \n        let tickElements = []//<NumberedTick value={1} majorTick={true} height={18}  />];\n        let majorTick = false; // flag that gets changed so we know if it should\n                                //  be a major more minor one \n        for(let i=0;i<numberedTicks.length;i++){\n            //  get the height percentage \n            let tickHeight = (((numberedTicks[i]-1)/(yMax-1)) * (height-offset)) + offset ;\n            \n            //  get an inrment constant \n            let incriment = ((1/(numberedTicks.length * 4)) * (height-offset)) ;\n\n            // each loop we need to add 3 ticks \n            // for(let j=0;j<3;j++){\n            //     let hight = tickHeight + (incriment * j) +12\n            //     tickElements.push(<RegularTick height={hight} />); \n            // }\n            \n            // then we can create the numbered tick \n            tickElements.push(<NumberedTick \n                                value={numberedTicks[i]}\n                                majorTick={majorTick}\n                                height={tickHeight}\n                              />);\n             //then we change the flag \n            //console.log(\"height for : \",numberedTicks[i], tickHeight)\n        }\n        tickElements = tickElements.reverse()\n        return (\n        <div  className=\"y-axis-element\" >\n            <div class=\"boost-yaxis-wrapper\">\n                {tickElements}\n            </div>\n        </div>\n        \n        )\n    }\n}\nfunction NumberedTick(props){\n    let hight = props.height +7\n    return (\n        <div class=\"yaxis-tick-wrapper\" style={{bottom:hight + \"px\"}}>\n            <div class=\"yaxis-tick-large\" >\n\n            </div>\n            {Math.round(props.value* 100)/100}\n        </div>\n    )\n}\nfunction RegularTick(props){\n    let hight = props.height //- 2\n    return (\n        <div  id=\"y-axis\" class=\"yaxis-tick-wrapper\" style={{bottom:hight + \"px\"}}>\n            <div class=\"yaxis-tick\">\n\n            </div>\n        </div>\n    )\n}\n\nexport class BoostXaxis extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            width : 0,\n            offset : 0, //  the offset in px\n        };\n    }\n    componentDidMount() {\n        const width = document.getElementById('x-axis').clientWidth;\n        this.setState({ width });\n    }\n    render(){\n        var  { xMax  } = this.props;\n        const { width, offset } = this.state;\n        let currentStep = 2;\n        let numberedTicks = [2];\n        while(currentStep <= ((xMax + 2 ))){\n            numberedTicks.push(currentStep);\n            currentStep = currentStep + 2;\n        }\n\n\n        let tickElements = []\n        for(let i=0;i<numberedTicks.length;i++){\n            let tickWidth = (((numberedTicks[i]-1)/(xMax-1)) * (width-offset)) + offset ;\n            tickElements.push(<XaxisTick \n                value={numberedTicks[i]}\n                left={tickWidth}\n              />);\n            \n        }\n        \n        return (\n        <div id=\"x-axis\" className=\"x-axis-element\">\n            <div className=\"boost-x-axis\" >\n                {tickElements}\n            </div>\n        </div>\n        )\n    }\n}\nfunction XaxisTick(props){\n    return (\n    <div  class=\"xaxis-tick-wrapper\" style={{left:props.left + \"px\"}}>\n        <div class=\"xaxis-tick\">\n\n        </div>\n        <div>\n        {props.value}s\n        </div>\n        \n    </div>\n    )\n}\n\nexport class BoostPayoutNumber extends Component{\n    \n    render(){\n        let style ={}\n        if(this.props.crashed){\n            style.color = \"red\";\n        }\n        let myPayoutElemnt;\n        if(this.props.wager.value){\n            myPayoutElemnt = (\n                <div class=\"boost-payout-currency-value\">\n                    + ${(this.props.currentPayout * parseFloat(this.props.wager.value)).toFixed(2)}\n                    </div>\n            )\n        } \n        if(this.props.wager.payout){\n            myPayoutElemnt = (\n                <div class=\"boost-payout-currency-value\">\n                    + ${(parseFloat(this.props.wager.payout) * parseFloat(this.props.wager.value)).toFixed(2)}\n                </div>\n            );\n        }else{\n            if(this.props.crashed && this.props.wager.value){\n                myPayoutElemnt = (\n                    <div class=\"boost-payout-currency-value\" style={style}>\n                        - ${(parseFloat(this.props.wager.value)).toFixed(2)}\n                        </div>\n                )\n            }\n        }\n        return (\n            <div className=\"boost-payout-number-wrapper\">\n                <div className=\"boots-payout-display\" style={style}>\n                    <div className=\"boost-payout-number\">\n                        {this.props.currentPayout.toFixed(2)}x\n                    </div>\n                    <div className=\"boost-payout-subtitle\">\n                        Current Payout\n                    </div >\n                    {myPayoutElemnt}\n                </div>\n\n                \n            </div>\n        )\n    }\n}\n\n//  creates the svg line \nexport class BoostLine extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            \n        }\n    }\n    render(){\n        var { testPoints, xMax, xMin, wagers } = this.props;\n        if(xMax < xMin){\n            xMax = xMin\n        }\n        //  create all the lines based on where they should be \n        let lines = [];\n        for(let i =1;i<testPoints.length;i++){\n            //  starting point \n            let x1 =( (((testPoints[i-1][0]/ 1000) /xMax) *100) - 0.02  )+ \"%\";\n            let y1 =( ((1-(testPoints[i-1][1] /this.props.yMax)) *100)  - 0.02  )+ \"%\";\n            \n            //  ending point \n            let x2 =( (((testPoints[i][0]/1000) /xMax) *100) + 0.02  ) + \"%\";\n            let y2 =( ((1-(testPoints[i][1] /this.props.yMax)) *100) + 0.02  ) + \"%\";\n            //console.log(x2,y2)\n            lines.push(\n                <line \n                stroke-linecap=\"round\"\n                    x1={x1 } \n                    y1={y1}\n                    x2={x2} \n                    y2={y2} \n                    style={{stroke:\"rgb(255,255,255,0.3)\",strokeWidth:\"5\", borderRadius: \"3px\"}} \n                    key={\"line-segment-\"+i}\n                />\n            )\n        }\n\n        //  now lets make the elements for all the wagers \n        let wagerElements = [];\n        for( let wager of wagers){\n            if(wager.payout){\n\n                //  caculate the middle point for the \n                //  placement of the wager element \n\n                let x =( (((wager.cashout/ 1000) /xMax) *100) - 0.02  )+ \"%\";\n                let y =( ((((wager.payout-1) /(this.props.yMax))) *100)  )+ \"%\";\n                console.log(wager,x,y)\n                wagerElements.push(\n                    <LineWagerItem \n                        bottom={y}\n                        left={x}\n\n                        multiplyer={wager.payout}\n                        tick={wager.cashout}\n                        value={wager.value}\n                        wager={wager}\n                    />\n                ) \n            }\n            \n        }\n\n        return (\n            <div class=\"boost-line-wrapper\">\n                <div class=\"boost-line-inner-wrapper\">\n                    <div className=\"boost-line-svg-wrapper\">\n                        <svg class=\"boost-line-svg\">\n                            {lines}\n                            \n                        </svg>\n                    </div>\n                    <div className=\"boost-line-wager-wrapper\">\n                        <div className=\"boost-line-wager\">\n                            {wagerElements}\n                        </div>\n                    </div>\n                \n                </div>\n                \n                \n            </div>\n        )\n    }\n}\n\n\n\n\nexport function RoundPreStart(props){\n    return (\n    <div className=\"pre-round-wrapper\">\n    <div style={{\n        display : \"flex\",\n\n    }}>\n        < DefaultRocketSprite />\n        <div style={{ textAlign : \"center\" }}>\n            <div className=\"pre-round-title\">\n                Perparing Round\n            </div>\n            <div className=\"pre-round-round-down\">\n                Starting In <span >{props.timeRemaining}s</span>\n            </div>\n        </div>\n        \n    </div>\n\n        \n    </div>\n    )\n}\n\n\nclass LineWagerItem extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            height : 0,\n            width : 0,\n            elmID : uuidv4() + \"-wager-placement\",\n            hover:false\n        };\n    }\n    componentDidMount() {\n        const height = document.getElementById(this.state.elmID).clientHeight;\n\n        const width = document.getElementById(this.state.elmID).clientWidth;\n        this.setState({ height, width });\n    }\n    onMouseOver(){\n        console.log(\"mouse over\")\n        this.setState({\n            hover:true\n        })\n    }\n    onMouseOut(){\n        console.log(\"mouse out\")\n        this.setState({\n            hover:false\n        })\n    }\n    render(){\n        var _this = this;\n        const { elmID,height,width } = this.state; \n        const { bottom, left, wager  } = this.props;\n        \n        return (\n            <div \n                onMouseEnter={()=>{\n                    _this.onMouseOver();\n                }}\n                id={elmID}\n                style={{\n                    position : \"absolute\",\n                    bottom: \"calc( \"+ bottom + \" - \" + (height/2) + \"px )\",\n                    left: \"calc( \"+ left + \" - \" + (width/2) + \"px )\",\n                    zIndex : 10000\n                }}\n            >\n                < img  src={require(\"./icons/\"+wager.currency.image)} style={{height : \"1.5rem\", width : \"1.5rem\"}}  />\n                \n            </div>\n            )\n    }\n    \n}\nfunction uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n  \n\nfunction distributedCopy(items, n) {\n    \n    var elements = [items[0]];\n    var totalItems = items.length - 2;\n    var interval = Math.floor(totalItems/(n - 2));\n    for (var i = 1; i < n - 1; i++) {\n        elements.push(items[i * interval]);\n    }\n    elements.push(items[items.length - 1]);\n    return elements;\n}","import React, { Component } from 'react';\nimport { withParse } from '../parse';\nimport './betting.css'\nimport { Button , InputGroup,\n    InputGroupAddon,\n    InputGroupButtonDropdown,\n    Input,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem} from 'reactstrap';\n\nexport  class BettingPannel extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            betType : \"manual\",\n        }\n    }\n    selectBetType(type){\n        this.setState({\n            betType : type\n        })\n    }\n    render(){\n        var _this = this;\n        const { betType } = this.state;\n        const {currentWager,cancelBet, nextRoundWager,waitingForNextRound,crashed, selectedCurrency, selectCurrency } = this.props;\n\n        let bettingInput = <ManualBet \n                placeManualBet={this.props.placeManualBet}\n                cashout={this.props.cashout} \n                wagers={this.props.wagers}\n                currentPayout={this.props.currentPayout}\n                currentWager={currentWager}\n                nextRoundWager={nextRoundWager}\n                waitingForNextRound={waitingForNextRound}\n                crashed={crashed}\n                cancelBet={cancelBet}\n                selectedCurrency={selectedCurrency}\n                logMessage={this.props.logMessage}\n        />\n        if(betType == \"auto\"){\n            bettingInput = < AutoBet />\n        }\n\n\n        return (\n            <div className=\"betting-pannel-wrapper\">\n                <div className=\"bet-type-selector\">\n                    <Button \n                    onClick={()=>{\n                        _this.selectBetType(\"manual\")\n                    }}\n                    color=\"primary\"  size=\"sm\" style={{marginRight:\"0.25rem\"}}>Manuel</Button>{' '}\n                    <Button \n                     onClick={()=>{\n                        _this.selectBetType(\"auto\")\n                    }}\n                    color=\"primary\" size=\"sm\">Auto-bet</Button>{' '}\n                </div>\n                <div style={{paddingTop:\"0rem\", flexGrow : \"1\", height:\"100%\", overflow:\"hidden\"}}>\n                    {bettingInput}\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\nclass ManualBet extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            betAmmount : 0 ,\n            autoCashout : 0,\n            betPlaced : false\n        }\n    }\n    onChange = event => {\n        \n        this.setState({ [event.target.name]: event.target.value });\n    }\n    submitBet(){\n        this.props.logMessage(\n             { title : \"Wager Submitted\" }\n        )\n        const { betAmmount, autoCashout } = this.state;\n        console.log(this.state)\n        console.log(\"submitting wager\")\n        this.props.placeManualBet(betAmmount,autoCashout);\n\n        this.setState( {\n            betPlaced : true\n        });\n    }   \n    cashout(){\n        this.props.logMessage(\n            { title : \"Wager Cashed Out\" }\n       )\n        this.props.cashout();\n    }\n    cancelBet(){\n        this.props.logMessage(\n            { title : \"Bet Canceled\" }\n       )\n        this.props.cancelBet();\n    }\n    render(){\n        //console.log(this.state)\n        const { betAmmount , autoCashout, betPlaced,  } = this.state;\n        const { currentPayout,currentWager, nextRoundWager,waitingForNextRound,crashed, selectCurrency, selectedCurrency } = this.props\n        //console.log(\"wager states :\",currentWager, nextRoundWager)\n        var _this = this;\n        //  if we have cashouted then we just clear us \n        \n        //  make the button here \n        let betButton = (<Button color=\"primary\" size=\"sm\" block\n                            onClick={()=>{\n                                _this.submitBet()\n                            }}\n                        >Place Bet</Button>)\n        \n\n        //  we also need to make a few style things here \n        let betOverlayStyles = {\n            position : \" absolute\",\n            backgroundColor : \"rgb(0,0,0,0.5)\",\n            top :0,\n            zIndex : 95\n        }\n        \n        //  if we are before the intersage and you \n        //  have no but then you can cancel it \n        if(nextRoundWager.value && (!currentWager.value || (currentWager.payout && currentWager.value))){\n            betButton = (<Button color=\"primary\" size=\"sm\" block\n                            onClick={()=>{\n                                _this.cancelBet()\n                            }}\n                        >Cancel Bet</Button>);\n             betOverlayStyles.height = \"100%\";\n            betOverlayStyles.width = \"100%\";\n        }\n\n        if(currentWager.value && !currentWager.payout){\n            betButton = ( <Button color=\"primary\" size=\"sm\" block\n                            onClick={()=>{\n                                _this.cashout()\n                            }}\n                        >Cashout</Button>);\n            betOverlayStyles.height = \"100%\";\n            betOverlayStyles.width = \"100%\";\n        }\n        if(currentWager.value && waitingForNextRound ){\n            betButton = ( <Button color=\"primary\" size=\"sm\" block disabled\n                            \n                        >Waiting For Round...</Button>);\n            betOverlayStyles.height = \"100%\";\n            betOverlayStyles.width = \"100%\";\n        }\n        \n        //  the place bet window \n        let betWindow = (\n            <div style={{padding:\"0.5rem\"}}>\n                <div  style={{position:\"relative\"}}>\n                    <div>Bet Ammount</div>\n                    <InputGroup size=\"sm\" >\n                        \n                    <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input\n                        name=\"betAmmount\"\n                        value={betAmmount}\n                        onChange={this.onChange}\n                        />\n                        \n                        <InputGroupAddon addonType=\"append\"><Button>1/2</Button></InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\"><Button>x2</Button></InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\"><Button>Max</Button></InputGroupAddon>\n                    </InputGroup>\n                    <div>Auto Cashout</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"1rem\"}}>\n                        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input\n                        name=\"autoCashout\"\n                        value={autoCashout}\n                        onChange={this.onChange}\n                        />\n                        \n                        \n                        <InputGroupAddon addonType=\"append\"><Button>X</Button></InputGroupAddon>\n                    </InputGroup>\n\n\n                    <div style={betOverlayStyles}>\n\n                    </div>\n                </div>\n                <div>\n                    {betButton}\n                </div>\n                \n            </div>\n        )\n\n       \n\n        //  here the round is going and we can cashout our bet             \n        //  if the the player has placed a bet give them a button to pull out \n        //  with \n        // if(betPlaced){\n        //     betWindow = (\n        //         <div style={{padding:\"0.5rem\"}}>\n        //             <div>CashOut Ammount</div>\n        //             <div>\n        //                 $ {currentPayout * betAmmount }\n        //             </div>\n        //             <Button color=\"primary\" size=\"sm\" block\n        //                 onClick={()=>{\n        //                     _this.cashout()\n        //                 }}\n        //             >Cashout</Button>\n        //         </div>\n        //     )\n        // }\n\n\n        return (\n            <div class=\"manual-bet-pannel\">\n                {betWindow}\n                <div style={{flexGrow:1,height:\"100%\", overflow: \"hidden\"}}>\n                    < PlacedBets  wagers={this.props.wagers} />\n                </div>\n\n                \n            </div>\n        )\n    }\n}\n\nclass PlacedBets extends Component{\n    render(){\n        const { wagers } = this.props;\n\n        let testPlayers = [];\n        for(let wager of wagers){\n            \n            //  lets do some calulations for each item \n            let value = wager.value;\n            let payout = \"\";\n            \n            if(wager.payout){\n                value = (parseFloat(wager.payout) * parseFloat(wager.value)).toFixed(2)\n                payout = \"x\" + wager.payout \n            };\n\n            testPlayers.push(\n                <div className=\"session-wager-list-item\">\n                        <div className=\"session-wager-player-status\">\n                            \n                        </div>\n                        <div className=\"session-wager-player-name\">\n                        {wager.name} \n                        </div>\n                        <div className=\"session-wager-player-delta\">\n                            {payout}\n                        </div>\n                        <div className=\"session-wager-player-ammount\">\n                            ${value} \n                        </div>\n                        <div className=\"session-wager-player-currency\">\n                            \n                        </div>\n                    </div>\n            )\n        }\n\n\n        return (\n            <div className=\"betting-session-wagers\" >\n                <div className=\"session-wagers-header\" >\n                    <div className=\"session-wagers-players\" >\n                        69 players\n                    </div>\n                    <div className=\"session-wagers-total\">\n                        $115.60\n                    </div>\n                </div>\n                \n                <div className=\"session-wager-list\">\n                {testPlayers}\n                    </div>\n                \n                \n            </div>\n        )\n    }\n}\n\n\n\nclass AutoBet extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            betAmmount : 0 ,\n            betChashout : 0,\n            totalBets : 0,\n            onWin : 0,\n            onWinIncrease : true,\n            onLoss : 0,\n            onLossIncrease : true,\n            stopAtProfit : 0,\n            stopAtLoss : 0\n        }\n    }\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n    placeBet(){\n\n    }\n    cancelBet(){\n\n    }\n    render(){\n        const { betAmmount,betChashout,totalBets,onWin,onWinIncrease,onLoss,onLossIncrease,stopAtProfit,stopAtLoss } = this.state;\n        var _this = this;\n        return (\n            <div className=\"auto-bet-pannel\">\n                <div style={{padding:\"0.5rem\"}}>\n                    <div>Bet Ammount</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input\n                        name=\"betAmmount\"\n                        value={betAmmount}\n                        onChange={this.onChange}\n                        />\n                        \n                        <InputGroupAddon addonType=\"append\"><Button>1/2</Button></InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\"><Button>x2</Button></InputGroupAddon>\n                        <InputGroupAddon addonType=\"append\"><Button>Max</Button></InputGroupAddon>\n                    </InputGroup>\n                </div>\n                <div className=\"bet-row\">\n                    <div className=\"bet-col\" style={{marginRight:\"0.5rem\"}}>\n                    <div>Bet Cashout</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input\n                        name=\"betChashout\"\n                        value={betChashout}\n                        onChange={this.onChange}\n                        />\n                        \n                        \n                    </InputGroup>\n                    </div>\n                    <div className=\"bet-col\" >\n                    <div>Total Bets</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">#</InputGroupAddon>\n                        <Input \n                        name=\"totalBets\"\n                        value={totalBets}\n                        onChange={this.onChange}\n                        />\n                        \n                        \n                    </InputGroup>\n                    </div>\n                </div>\n\n                <div style={{padding:\"0.5rem\"}}>\n                    <div>On Win</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">%</InputGroupAddon>\n                        <Input\n                        name=\"onWin\"\n                        value={onWin}\n                        onChange={this.onChange}\n                        />\n                        \n                       \n                        <InputGroupAddon addonType=\"append\" \n                        onClick={()=>{\n                            _this.setState({\n                                onWinIncrease : true\n                            })\n                        }}\n                        \n                        ><Button\n                        outline={!onWinIncrease}\n                        >Increase</Button></InputGroupAddon>\n                        <InputGroupAddon\n                        onClick={()=>{\n                            _this.setState({\n                                onWinIncrease : false\n                            })\n                        }}\n                        addonType=\"append\">\n                        <Button \n                        outline={onWinIncrease}>Reset</Button></InputGroupAddon>\n                    </InputGroup>\n                </div>\n\n                <div style={{padding:\"0.5rem\"}}>\n                    <div>On Loss</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">%</InputGroupAddon>\n                        <Input \n                        \n                        name=\"onLoss\"\n                        value={onLoss}\n                        onChange={this.onChange}/>\n                        \n                        \n                        <InputGroupAddon \n                        onClick={()=>{\n                            _this.setState({\n                                onLossIncrease : true\n                            })\n                        }}\n                        addonType=\"append\" ><Button outline={!onLossIncrease}>Increase </Button></InputGroupAddon>\n                        <InputGroupAddon \n                        onClick={()=>{\n                            _this.setState({\n                                onLossIncrease : false\n                            })\n                        }}\n                        addonType=\"append\"><Button outline={onLossIncrease}>Reset</Button></InputGroupAddon>\n                    </InputGroup>\n                </div>\n\n                <div className=\"bet-row\">\n                    <div className=\"bet-col\" style={{marginRight:\"0.5rem\"}}>\n                    <div>Stop At Profit</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                        <Input \n                         name=\"stopAtProfit\"\n                         value={stopAtProfit}\n                         onChange={this.onChange}\n                        />\n                        \n                        \n                    </InputGroup>\n                    </div>\n                    <div className=\"bet-col\" >\n                    <div>Stop At Loss</div>\n                    <InputGroup size=\"sm\" style={{paddingBottom:\"0.5rem\"}}>\n                        \n                        <InputGroupAddon addonType=\"prepend\">#</InputGroupAddon>\n                        <Input \n                         name=\"stopAtLoss\"\n                         value={stopAtLoss}\n                         onChange={this.onChange}\n                        />\n                        \n                        \n                    </InputGroup>\n                    </div>\n                </div>\n                <div style={{padding:\"0.5rem\"}}>\n                <Button color=\"primary\" size=\"sm\" block>Place Bet</Button>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component,useState } from 'react';\nimport { withParse } from '../parse';\nimport { Dropdown,Tooltip, DropdownToggle, DropdownMenu, DropdownItem, Alert } from 'reactstrap';\nimport './sessionHistory.css';\nimport './header.css';\nimport './notificationcenter.css'\nimport { coinList } from '../../constants/coins';\n\n\n\nexport function Footer(props){\n    return (\n    <div className=\"boost-footer\" >\n        <div className=\"footer-icon-wrapper\" >\n            <div  className=\"game-fullscreen-button\" />\n        </div>\n        <div className=\"footer-icon-wrapper\" >\n            <div className=\"game-expand-button\" />\n        </div>\n        {props.children}\n        <div className=\"footer-disapear\" />\n            \n    </div>\n    )\n}\n\n\n\n\n\n\n\n\n\n\nexport function HistoryBar(props){\n    let historyElements = [];\n    for(let payout of props.payoutHistory){\n        historyElements.push(\n            <PayoutHistoryElement\n                value={payout}\n            />\n        )\n    }\n    return (\n    <div  className=\"session-history-wrapper\">\n        {historyElements}\n    </div>\n    )\n}\n\n\nfunction PayoutHistoryElement(props){\n    return(<div className=\"payout-history-element\" >{props.value}x</div>)\n} \n\n\n\n\nexport function Header(props){\n    //console.log(props)\n    return (\n    <div className=\"boost-header\">\n        <div className=\"header-icon\" >\n\n        </div>\n        <div className=\"boost-header-title\" >\n            Boost\n        </div>\n        <div className=\"boost-header-maxpayout\" >\n            < MaxProfitIndicator />\n            {props.children}\n        </div>\n    </div>\n    )\n\n}\n\nconst MaxProfitIndicator = (props) => {\n    const [tooltipOpen, setTooltipOpen] = useState(false);\n  \n    const toggle = () => setTooltipOpen(!tooltipOpen);\n  \n    return (\n      <div >\n        <div id=\"TooltipExample\" className=\"boost-header-maxpayout\">Max Profit < div className=\"boost-header-maxpayout-icon\" /></div>\n        <Tooltip placement=\"left\" isOpen={tooltipOpen} target=\"TooltipExample\" toggle={toggle}>\n            <div style={{\n                fontSize : \"0.75rem\",\n                color : \"rgb(255,255,255,0.5)\"\n            }}>\n                $7000 max Profit\n            </div>\n        </Tooltip>\n      </div>\n    );\n  }\n\nexport class WalletDropDown extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            listOfCoins : [\n                {\n                    \"name\" : \"BTC\",\n                    \"image\" : \"Bitcoin.svg\",\n                    \"ammount\" : 3245.32\n                },\n                {\n                    \"name\" : \"BAT\",\n                    \"image\" : \"BAT.svg\",\n                    \"ammount\" : 3245.32\n                },\n                {\n                    \"name\" : \"DOGE\",\n                    \"image\" : \"dogecoin.svg\",\n                    \"ammount\" : 22.32\n                },\n                {\n                    \"name\" : \"EOS\",\n                    \"image\" : \"eos.svg\",\n                    \"ammount\" : 45.32\n                },\n                {\n                    \"name\" : \"ETH\",\n                    \"image\" : \"ethereum.svg\",\n                    \"ammount\" : 45.32\n                },\n                {\n                    \"name\" : \"LTC\",\n                    \"image\" : \"litecoin.svg\",\n                    \"ammount\" : 3245.32\n                },\n                {\n                    \"name\" : \"XMR\",\n                    \"image\" : \"monero.svg\",\n                    \"ammount\" : 3.32\n                },\n                {\n                    \"name\" : \"XRP\",\n                    \"image\" : \"XRP.svg\",\n                    \"ammount\" : 1.32\n                },{\n                    \"name\" : \"BETA\",\n                    \"image\" : \"betacoin.png\",\n                    \"ammount\" : 432.34\n                }\n\n            ]\n        }\n    }\n    \n    render(){\n        const {selectedCurrency, selectCurrency} = this.props;\n        var _this = this;\n        const { listOfCoins, dropdownOpen, } = this.state;\n        let dropDownItems = []\n        let dropdownToggle;\n        for(let coin of listOfCoins){\n            dropDownItems.push(\n                <DropdownItem  color=\"primary\" size=\"sm\"\n                    style={{display:\"flex\", width : \"100%\",fontWeight:500,alignItems: \"center\", fontSize : \"0.9rem\"}}\n                    onClick={()=>{\n                        selectCurrency( coin)\n                    }}\n                >\n                    <img \n                        src={require(\"./icons/\"+coin.image)}\n                        style={{\n                            height : \"1.5rem\",\n                            width : \"1.5rem\",\n                            marginRight: \"0.5rem\"\n                        }} \n                    /> \n                    {coin.name} \n                \n                    <div \n                    style={{\n                        marginright:\"0.5rem\",\n                        fontSize : \"0.8rem\",\n                        flexGrow : 1,\n                        marginLeft: \"1rem\",\n                    textAlign : \"right\",\n                    fontWeight : 400\n                    }}\n                    >\n                        ${coin.ammount}\n                    </div>\n                </DropdownItem>\n            )\n            if(coin.name == selectedCurrency.name){\n                dropdownToggle = (\n                    <DropdownToggle caret style={{display:\"flex\", width : \"100%\",alignItems: \"center\", fontSize : \"0.9rem\", flexWrap : \"no-wrap\", fontWeight: 600}}\n                    \n                >\n                    <img \n                        src={require(\"./icons/\"+coin.image)}\n                        style={{\n                            height : \"1.5rem\",\n                            width : \"1.5rem\",\n                            marginRight: \"0.5rem\"\n                        }} \n                    /> \n                    {coin.name} \n                \n                    <div \n                    style={{\n                        marginright:\"0.5rem\",\n                        fontSize : \"0.9rem\",\n                        flexGrow : 1,\n                        marginLeft: \"1rem\",\n                    textAlign : \"right\",\n                    fontWeight : 400\n                    }}\n                    >\n                        ${coin.ammount}\n                    </div>\n                    </DropdownToggle>\n                )\n            }\n        }\n\n        return (\n        \n            <Dropdown isOpen={dropdownOpen} size=\"sm\" toggle={()=>{\n                _this.setState({\n                    dropdownOpen : !dropdownOpen\n                })\n            }}>\n                {dropdownToggle}\n                <DropdownMenu right>\n                <DropdownItem header>Wallet</DropdownItem>\n                    {dropDownItems}\n                    <DropdownItem divider />\n                    <DropdownItem\n                    style={{display:\"flex\", width : \"100%\",alignItems: \"center\", fontSize : \"0.9rem\", flexWrap : \"no-wrap\"}}\n                    >\n                    <img \n                        src={require(\"./icons/bank.svg\")}\n                        style={{\n                            height : \"1.5rem\",\n                            width : \"1.5rem\",\n                            marginRight: \"0.5rem\"\n                        }} \n                    /> \n                        My Account    \n                    </DropdownItem>\n                </DropdownMenu>\n            </Dropdown>\n        \n        )\n    }\n}\n\nexport class NotificationCenter extends Component {\n    constructor(props){\n        super(props);\n         //console.log(props)\n\n    }\n     \n    \n    \n    render(){\n        //  we can loop throug the props \n\n        const {messages} = this.props;\n        var messageList = [];\n       \n        for(let message of this.props.messages){\n            //  \n            \n            if(!message.message.dismissed){\n                messageList.push(<NotificationCenterMessage\n                //key={}\n                    messageBody={message.message.title}\n                    dismissTimer={3000}\n                    close={()=>{\n                        //  so the message can close it self\n                        //  and have a clise button that will \n                        //  dismiss it \n                        message.dissmissMessage()\n                    }}  \n                    //  the childern ar the calls to actions\n    \n                >\n    \n    \n                </NotificationCenterMessage>)\n            }\n            \n        }\n        return (\n            <div className=\"notification-center-wrapper\">\n               <div className=\"notification-center-message-list\">\n                    {messageList}\n                </div> \n            </div>\n        )\n    }\n}\n\nconst NotificationCenterMessage = (props)=>{\n\n    //  with all the props we can do some cool ass things \n    if(props.dismissTimer){\n        setTimeout(()=>{\n            //  close the message\n            props.close();\n        },props.dismissTimer);\n    }\n   \n    \n    \n    return (<Alert \n        size=\"sm\"\n                color=\"secondary\" \n                isOpen={true}>\n                <img \n                    src = {require(\"./information-dark.svg\")}\n                    style={{\n                        height: \"0.75rem\",\n                        width : \"0.75rem\",\n                        marginRight : \"0.5rem\"\n                    }}\n                />{props.messageBody}\n            </Alert>)\n}","import React, { Component } from 'react';\nimport { withParse } from '../parse';\nimport './index.css'\nimport { BoostLine , BoostRocket , BoostPayoutNumber,DefaultRocketSprite, BoostXaxis , BoostYaxis, RoundPreStart } from './baseGame';\nimport { BettingPannel } from './betting'\nimport { Header, HistoryBar, Footer, WalletDropDown, NotificationCenter} from './bars'\n\n\n\nclass BoostGameBase extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            xMax : 6, // time in seconds of the x axies\n            xMin : 2,\n            yMax :2.5 , //    the percentage of the y axis in integer precentage \n            currentPayout : 1,   //  current position \n            currentTick : 0,\n            testPoints  : [\n                [0,0],  //  at zero seconds the payout is 1\n                [0.1,0.01]\n            ],\n            wagers : [], // a list of wagers for the current session \n            lastPayout : 1.43,\n            payoutHistory : [],\n            roundStart : (new Date()).getTime(),\n            timeReaming : 0,\n            crashed : false,\n            nextRoundWager : {},\n            currentWager : {},\n            autoBetParameter : {    //  for setting up the auto betting\n                enabled : false,    //  an in bot browser \n                baseValue : 0,\n                cashoutValue : 0,\n                totalBets : 0,\n                onWin : 0,\n                onWinIncrease : true,\n                onLoss : 0,\n                onLossIncrease : true,\n                stopAtProfit : 0,\n                stopAtLost : 0\n            },\n            autoBetCounters : {\n                totalBets : 0,  //  how many auto bets \n                wagerSum : 0,   //  total auto bet win sum \n            },\n            waitingForNextRound : false,\n            selectedCurrency : {\n                \"name\" : \"BETA\",\n                \"image\" : \"betacoin.png\",\n                \"ammount\" : 3245.32\n            },\n            notificationCenterMessage : [],\n        };\n        this.inializeConnection();\n        \n    }\n\n    async inializeConnection(){\n        //  connect socket to the server \n        var _this = this;\n        _this.startGameLoop();\n        return\n        //  connect to the wallet table and wait for \n        //  updates on our table \n        let user = this.props.parse.parse.User.current();\n        console.log(\"thing started\")\n        //  do a live query for their wallet object \n        const UserWallet = this.props.parse.parse.Object.extend(\"UserWallet\");\n        const walletQuery = new this.props.parse.parse.Query(UserWallet);\n        //walletQuery.equalTo(\"id\", user.attributes.userWallet.id);\n        let wallet = await walletQuery.first()\n        console.log(wallet)\n        let walletSubscription = await walletQuery.subscribe();\n        walletSubscription.on('open', () => {\n            console.log('subscription opened');\n            _this.startGameLoop();\n        });\n        walletSubscription.on('update', (object) => {\n            console.log('object updated');\n        });\n        walletSubscription.on('close', () => {\n            console.log('subscription closed');\n        });\n    }\n\n    // this will add a notification center message  \n    addNotificationCenterMessage(messageObject){\n        //  add it to the list \n        var { notificationCenterMessage } = this.state;\n        notificationCenterMessage.unshift({\n            dissmissMessage : ()=>{\n                //  when this function is called \n                //  the message will be removed from the\n                //  notification center\n                console.log(messageObject)\n                messageObject.dismissed = true;\n\n                this.setState({})\n            },\n            message : messageObject\n        })\n\n        this.setState({\n            notificationCenterMessage : notificationCenterMessage\n        })\n\n    }\n\n\n\n    //  master loop for boost game\n    startGameLoop(){\n        var currentTick = this.state.currentTick + 16;\n        var _this = this;\n        var currentPayout =  (Math.round((this.getPayoutAtTick(currentTick) + 1)*100) / 100);\n        //console.log(currentTick)\n        //  if we hit this we restart just for testing \n        if(this.state.testPoints[this.state.testPoints.length-1][1] < this.state.lastPayout){\n            var testPoints = this.state.testPoints;\n            let lastTestPoint = this.state.testPoints[this.state.testPoints.length-1];\n            //console.log(this.getPayoutAtTick(currentTick),lastTestPoint[1] )\n            //  if there is a % change from last time so we dont do alot of updates \n            // if(this.getPayoutAtTick(currentTick) > lastTestPoint[1]){\n            //     testPoints.push(\n            //         [\n            //             currentTick ,\n            //             this.getPayoutAtTick(currentTick) \n            //         ]\n            //     );\n            // }else{\n            //     this.state.testPoints[this.state.testPoints.length-1][0] = currentTick\n            // }\n            testPoints.push(\n                [\n                    currentTick ,\n                    this.getPayoutAtTick(currentTick) \n                ]);\n\n            \n            \n            \n\n            //  do a max y calculation\n            var yMax = this.state.yMax;\n            if(currentPayout > 2.2){\n                yMax = currentPayout + 0.3\n            }\n\n            this.setState({\n                testPoints : testPoints,\n                xMax : this.state.testPoints[this.state.testPoints.length-1][0] / 1000,\n                currentTick : currentTick,\n                currentPayout : currentPayout,\n                yMax : yMax\n                \n            })\n            setTimeout(()=>{\n                \n                _this.startGameLoop()\n            },16)\n        }else{\n            console.log(\"done\")\n            //  we reset and then start the loop \n            let payoutHistory = this.state.payoutHistory;\n            payoutHistory.unshift(this.state.currentPayout);\n            _this.setState({\n                crashed : true,\n                payoutHistory:payoutHistory,\n                \n            })\n            \n            this.endBoostRound()\n        }\n    }\n    endBoostRound(){\n        \n        var _this = this;\n        setTimeout(()=>{\n            this.setState({\n                roundStart : (new Date()).getTime() + 7500, //  to seconds from now\n                wagers : [] ,\n                currentWager : {},\n                waitingForNextRound : true,\n            })\n            _this.roundPreperationLoop();\n        },3000)\n        \n    }\n\n    roundPreperationLoop(){\n        var _this = this;\n        //  should run until the next round start then \n        //  hand it over to the game loop \n        if(this.state.roundStart < (new Date()).getTime()){\n           //   the round starts  \n            this.setState({\n                xMax : 6, // time in seconds of the x axies\n                yMax :2.5 , //    the percentage of the y axis in integer precentage \n                currentPayout : 1,   //  current position \n                testPoints  : [\n                    [0,0],  //  at zero seconds the payout is 1\n                    [0.1,0.01]\n                ],\n                lastPayout : (Math.random() * 10),\n                timeReaming : 0,\n                currentTick:0,\n                crashed : false,\n                waitingForNextRound : false,\n                \n            });\n            setTimeout(()=>{\n                _this.startGameLoop();\n            },16)\n        }else{\n            //  if there is a wager then we can submit it \n            if(this.state.nextRoundWager.value){\n                //  lock it in as my wager for \n                //  the round \n                this.submitWager(this.state.nextRoundWager.value,this.state.nextRoundWager.autoCashout);\n                this.setState({\n                    nextRoundWager : {}\n                })\n            } else if (this.state.autoBetParameter.enabled){\n                //  if the auto bet is enabled we should submit the \n                //  wager and then incriment the paraments \n            }\n\n            _this.setState({\n                timeReaming : this.state.roundStart - (new Date()).getTime(),\n                \n            })\n            setTimeout(()=>{\n                _this.roundPreperationLoop();\n            },0)\n        }\n        \n    }\n\n\n\n\n    //  function to get the formula at a point \n    getPayoutAtTick(t){\n\n        //  this is a peice wise function that will return a 2 decimal \n        //  value for the payout at that time \n        if(t < 10472){  //  all the value is less than 10 seconds \n            //  for this one its just a linear function \n            let y = (t/1000) * 0.2 //    its just a constat\n            \n            \n            return y;\n        }else {\n            //  here we have a devently shallow parabolic that will go up \n            //  and interesects with the function above\n            let y = Math.pow( (t/1000) + 4,2 ) / 100\n            \n            \n            return y\n        }\n    }\n\n\n\n\n\n    placeManualBet(betAmmount,autoCashout){\n        console.log(betAmmount,autoCashout)\n        //  there are 2 time to palce bet, \n        if(this.state.roundStart > (new Date()).getTime()){\n            //  1 is when we are in the interound stage and when placed cannot cancle \n            this.submitWager(betAmmount,autoCashout);\n        }else{\n            //  2 when we are in the round and we can cancel our bet until the intersage\n            this.setState({\n                nextRoundWager : {\n                    name : \"test account\",\n                    value : betAmmount,\n                    autoCashout : autoCashout,\n                    currenty : this.state.selectedCurrency\n                }\n            })\n        }\n        \n\n        \n        \n    }\n\n    cashout(){\n        //  cashout this is just for me but i will need to change it \n        //  later with the server \n        \n        let myWager = this.state.currentWager\n        myWager.cashout = this.state.currentTick;\n        myWager.payout = this.state.currentPayout;\n        \n        this.setState({\n            currentWager : myWager\n        })\n    }\n    \n\n    submitWager(betAmmount,autoCashout){\n        // so we will submit it (future to the server)\n        let wagers = this.state.wagers;\n        let wager = {\n            name : \"test account\",\n            value : betAmmount,\n            autoCashout : autoCashout,\n            currency : this.state.selectedCurrency\n        }\n        wagers.push(wager)\n        console.log(wagers)\n\n        this.setState({\n            wagers : wagers,\n            currentWager : wager\n        })\n\n    }\n\n\n    cancelWager(){\n        console.log(\"cancleing wager\")\n        this.setState({\n            \n            nextRoundWager : {}\n        })\n    }\n\n\n\n\n\n    render(){\n        const { wagers , \n                currentWager, \n                nextRoundWager,\n                xMin , \n                yMax,\n                timeReaming, \n                crashed , \n                testPoints ,\n                currentPayout, \n                payoutHistory,\n                currentTick,\n                waitingForNextRound,\n                selectedCurrency\n                } = this.state;\n        var _this = this;\n        //  get the last point \n        let boostGameWindow = (\n                        <div class=\"boost-game-wrapper\">\n                            <div class=\"boost-game-top-wrapper\">   \n                                <div class=\"boost-graph-wrapper\">\n                                    \n                                    <BoostLine \n                                        testPoints={testPoints}\n                                        xMax={currentTick / 1000}\n                                        xMin={xMin}\n                                        yMax={yMax}\n                                        wagers={wagers}\n                                    />\n                                    <BoostRocket \n                                        testPoints={testPoints}\n                                        xMax={currentTick / 1000}\n                                        crashed={crashed}\n                                        yMax={yMax}\n                                        xMin={xMin}\n                                    />\n                                    <BoostPayoutNumber \n                                        crashed={crashed}\n                                        currentPayout={currentPayout} \n                                        wager={currentWager}\n                                    />\n                                    \n                                </div>\n                            \n                                <BoostXaxis xMax={currentTick / 1000} xMin={xMin} />\n                            </div>\n                            <div id=\"y-axis\" class=\"boost-game-bottom-wrapper\">\n                            <div class=\"boost-y-axis-wrapper\">\n                                    <BoostYaxis \n                                        yMax={yMax}\n                                        step={0.1}\n                                    />\n                                </div>\n                                \n                            </div>\n                            \n                        </div>\n        );\n        //  if the next round hasnt started yet \n        if(this.state.roundStart > (new Date()).getTime()){\n            boostGameWindow =  (\n                < RoundPreStart  \n                timeRemaining={(timeReaming/1000).toFixed(2)} \n                />\n            )\n        }\n        //console.log(wagers)\n        return (\n\n\n            <div className=\"boost-wrapper shadow-lg\" >\n                <div className=\"boost-header-wrapper\" >\n                    < Header >\n                        <WalletDropDown\n                        \n                        selectCurrency={(currency)=>{\n                            this.setState({\n                                selectedCurrency : currency\n                            })\n                        }}\n                        \n                        selectedCurrency={selectedCurrency} />\n                    </ Header>\n                </div>\n                <div className=\"boost-main-wrapper\" >\n                    <div className=\"boost-session-wrapper\">\n                        <div style={{marginRight:\"   0rem\"}}>\n                            <BettingPannel \n                                crashed={crashed}\n                                wagers={wagers} \n                                nextRoundWager={nextRoundWager}\n                                currentWager={currentWager}\n                                currentPayout={currentPayout}\n                                //  for the notification center \n                                logMessage={(message)=>{\n                                   // _this.addNotificationCenterMessage(message);\n                                    console.log(message.title)\n                                }}\n\n\n                                //  will let us kknow if we are in the intersage\n                                waitingForNextRound={waitingForNextRound}\n                                placeManualBet={(betAmmount,cashout)=>{\n                                    //  \n                                    _this.placeManualBet(betAmmount,cashout)\n                                }}\n                                cashout={()=>{\n                                    _this.cashout()\n                                }}\n                                cancelBet={()=>{\n                                    _this.cancelWager()\n                                }}\n                            />\n                        </div>\n                        {boostGameWindow}\n                        \n                    </div>\n                </div>\n                <div className=\"boost-footer-wrapper\" >\n                    <Footer>\n                        < HistoryBar payoutHistory={payoutHistory} />\n                    </Footer>\n                    \n                </div>\n\n            </div>\n\n\n\n\n\n            \n        \n\n\n\n        \n        )\n    }\n}\n\n\n\nexport default withParse(BoostGameBase);\n","import React from 'react';\n \nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from 'react-router-dom';\n\n\nimport {withAuthentication} from './components/session'\n\nimport  {LiveChat} from './components/liveStream';\nimport Landing from './components/landing'\nimport BoostGame from './components/boostGame'\nfunction App() {\n    return (\n          <BoostGame />\n           \n \n       \n    );\n  }\n  \n  export default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n    <App /> \n  \n  \n  , document.getElementById('boost_game_container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}